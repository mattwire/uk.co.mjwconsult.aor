diff --git a/CRM/Activity/BAO/Activity.php b/CRM/Activity/BAO/Activity.php
index a591d350f76..b8bbeb60f72 100644
--- a/CRM/Activity/BAO/Activity.php
+++ b/CRM/Activity/BAO/Activity.php
@@ -1528,12 +1528,20 @@ public static function sendEmail(
     }
 
     // get token details for contacts, call only if tokens are used
-    $details = array();
+    $details = $extraParams = array();
+    foreach ($contactDetails as $key => $detail) {
+      if (!empty($detail['membership_id'])) {
+        $extraParams = array_replace_recursive($extraParams, CRM_Member_Form_Task::setExtraTokenDetails(array($detail['membership_id'])));
+      }
+    }
+
     if (!empty($returnProperties) || !empty($tokens) || !empty($allTokens)) {
       list($details) = CRM_Utils_Token::getTokenDetails(
         $contactIds,
         $returnProperties,
-        NULL, NULL, FALSE,
+        NULL,
+        NULL,
+        $extraParams,
         $allTokens,
         'CRM_Activity_BAO_Activity'
       );
diff --git a/CRM/Contact/Form/Task/EmailCommon.php b/CRM/Contact/Form/Task/EmailCommon.php
index 88be4a082bd..5957b59ece5 100644
--- a/CRM/Contact/Form/Task/EmailCommon.php
+++ b/CRM/Contact/Form/Task/EmailCommon.php
@@ -212,24 +212,13 @@ public static function buildQuickForm(&$form) {
 
     // check if we need to setdefaults and check for valid contact emails / communication preferences
     if (is_array($form->_allContactIds) && $setDefaults) {
-      $returnProperties = array(
-        'sort_name' => 1,
-        'email' => 1,
-        'do_not_email' => 1,
-        'is_deceased' => 1,
-        'on_hold' => 1,
-        'display_name' => 1,
-        'preferred_mail_format' => 1,
+      $contactParams = array(
+        'id' => array('IN' => $form->_allContactIds),
+        'return' => array('sort_name', 'email', 'do_not_email', 'is_deceased', 'on_hold', 'display_name', 'preferred_mail_format'),
+        'options' => array('limit' => 0),
       );
-
-      // get the details for all selected contacts ( to, cc and bcc contacts )
-      list($form->_contactDetails) = CRM_Utils_Token::getTokenDetails($form->_allContactIds,
-        $returnProperties,
-        FALSE,
-        FALSE
-      );
-
-      // make a copy of all contact details
+      $contactDetails = civicrm_api3('Contact', 'get', $contactParams);
+      $form->_contactDetails = $contactDetails['values'];
       $form->_allContactDetails = $form->_contactDetails;
 
       // perform all validations on unique contact Ids
@@ -480,6 +469,8 @@ public static function submit(&$form, $formValues) {
     // format contact details array to handle multiple emails from same contact
     $formattedContactDetails = array();
     $tempEmails = array();
+    $extraParams = CRM_Member_Form_Task::setExtraTokenDetails($form->getVar('_memberIds'));
+
     foreach ($form->_contactIds as $key => $contactId) {
       // if we dont have details on this contactID, we should ignore
       // potentially this is due to the contact not wanting to receive email
@@ -495,6 +486,7 @@ public static function submit(&$form, $formValues) {
         $details = $form->_contactDetails[$contactId];
         $details['email'] = $email;
         unset($details['email_id']);
+        $details += $extraParams['contact_details'][$contactId];
         $formattedContactDetails[] = $details;
       }
     }
diff --git a/CRM/Member/Form/Task.php b/CRM/Member/Form/Task.php
index 7624334c19e..f4ffc04fb56 100644
--- a/CRM/Member/Form/Task.php
+++ b/CRM/Member/Form/Task.php
@@ -161,6 +161,18 @@ public function setContactIDs() {
     );
   }
 
+  public static function setExtraTokenDetails($memberIds) {
+    $extraParams = array();
+    $memberships = CRM_Utils_Token::getMembershipTokenDetails($memberIds);
+    foreach ($memberIds as $membershipId) {
+      $membership = $memberships[$membershipId];
+      // get contact information
+      $contactId = $membership['contact_id'];
+      $extraParams['contact_details'][$contactId] = array('membership_id' => $membershipId);
+    }
+    return $extraParams;
+  }
+
   /**
    * Simple shell that derived classes can call to add buttons to.
    * the form with a customized title for the main Submit
diff --git a/CRM/Member/Form/Task/PDFLetterCommon.php b/CRM/Member/Form/Task/PDFLetterCommon.php
index 47d2dd4e675..4becbc6b014 100644
--- a/CRM/Member/Form/Task/PDFLetterCommon.php
+++ b/CRM/Member/Form/Task/PDFLetterCommon.php
@@ -61,6 +61,8 @@ public static function generateHTML($membershipIDs, $returnProperties, $skipOnHo
     $memberships = CRM_Utils_Token::getMembershipTokenDetails($membershipIDs);
     $html = array();
 
+    $extraParams = CRM_Member_Form_Task::setExtraTokenDetails($membershipIDs);
+
     foreach ($membershipIDs as $membershipID) {
       $membership = $memberships[$membershipID];
       // get contact information
@@ -73,7 +75,7 @@ public static function generateHTML($membershipIDs, $returnProperties, $skipOnHo
         $returnProperties,
         $skipOnHold,
         $skipDeceased,
-        NULL,
+        $extraParams,
         $messageToken,
         'CRM_Contribution_Form_Task_PDFLetterCommon'
       );
diff --git a/CRM/Utils/Token.php b/CRM/Utils/Token.php
index 7bd729b2b0c..80259d4d966 100644
--- a/CRM/Utils/Token.php
+++ b/CRM/Utils/Token.php
@@ -1206,7 +1206,20 @@ public static function getTokenDetails(
       $params[] = array('on_hold', '=', 0, 0, 0);
     }
 
+    // $extraParams is used in CRM_Contact_BAO_Utils::updateGreeting() and nowhere else!
+    //  it passes the array (contact_type, =, ...) through to filter the search.
+    // $contactExtraDetails is an array of extra parameters (eg membership_id) that can be passed through for use by custom token hooks
+    //  Anything added to the $extraParams['contact_details'] array will be included in this.
+    $contactExtraDetails = array();
     if ($extraParams) {
+      foreach ($extraParams as $key => $value) {
+        switch ($key) {
+          case 'contact_details':
+            $contactExtraDetails = $value;
+            unset($extraParams['contact_details']);
+            break;
+        }
+      }
       $params = array_merge($params, $extraParams);
     }
 
@@ -1237,9 +1250,12 @@ public static function getTokenDetails(
 
     $details = CRM_Contact_BAO_Query::apiQuery($params, $returnProperties, NULL, NULL, 0, count($contactIDs), TRUE, FALSE, TRUE, CRM_Contact_BAO_Query::MODE_CONTACTS, NULL, TRUE);
 
+    // These are the parameters that will be passed through to custom hooks.
     $contactDetails = &$details[0];
 
     foreach ($contactIDs as $key => $contactID) {
+      // Merge in extra details that were passed in for use in custom hooks
+      $contactDetails[$contactID] = array_merge($contactDetails[$contactID], $contactExtraDetails[$contactID]);
       if (array_key_exists($contactID, $contactDetails)) {
         if (!empty($contactDetails[$contactID]['preferred_communication_method'])
         ) {
