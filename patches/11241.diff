diff --git a/CRM/Activity/Task.php b/CRM/Activity/Task.php
index dbb2e6307d3..c01d5d2f9f5 100644
--- a/CRM/Activity/Task.php
+++ b/CRM/Activity/Task.php
@@ -33,28 +33,7 @@
 /**
  * Class to represent the actions that can be performed on a group of contacts used by the search forms.
  */
-class CRM_Activity_Task {
-  const
-    DELETE_ACTIVITIES = 1,
-    PRINT_ACTIVITIES = 2,
-    EXPORT_ACTIVITIES = 3,
-    BATCH_ACTIVITIES = 4,
-    EMAIL_CONTACTS = 5,
-    EMAIL_SMS = 6;
-
-  /**
-   * The task array.
-   *
-   * @var array
-   */
-  static $_tasks = NULL;
-
-  /**
-   * The optional task array.
-   *
-   * @var array
-   */
-  static $_optionalTasks = NULL;
+class CRM_Activity_Task extends CRM_Core_Task {
 
   /**
    * These tasks are the core set of tasks that the user can perform
@@ -63,20 +42,20 @@ class CRM_Activity_Task {
    * @return array
    *   the set of tasks for a group of contacts
    */
-  public static function &tasks() {
+  public static function tasks() {
     if (!(self::$_tasks)) {
       self::$_tasks = array(
-        1 => array(
+        self::DELETE_ACTIVITIES => array(
           'title' => ts('Delete activities'),
           'class' => 'CRM_Activity_Form_Task_Delete',
           'result' => FALSE,
         ),
-        2 => array(
+        self::PRINT_ACTIVITIES => array(
           'title' => ts('Print selected rows'),
           'class' => 'CRM_Activity_Form_Task_Print',
           'result' => FALSE,
         ),
-        3 => array(
+        self::EXPORT_ACTIVITIES => array(
           'title' => ts('Export activities'),
           'class' => array(
             'CRM_Export_Form_Select',
@@ -84,7 +63,7 @@ public static function &tasks() {
           ),
           'result' => FALSE,
         ),
-        4 => array(
+        self::BATCH_ACTIVITIES => array(
           'title' => ts('Update multiple activities'),
           'class' => array(
             'CRM_Activity_Form_Task_PickProfile',
@@ -92,7 +71,7 @@ public static function &tasks() {
           ),
           'result' => FALSE,
         ),
-        5 => array(
+        self::EMAIL_CONTACTS => array(
           'title' => ts('Email - send now'),
           'class' => array(
             'CRM_Activity_Form_Task_PickOption',
@@ -100,17 +79,17 @@ public static function &tasks() {
           ),
           'result' => FALSE,
         ),
-        6 => array(
+        self::EMAIL_SMS => array(
           'title' => ts('SMS - send reply'),
           'class' => 'CRM_Activity_Form_Task_SMS',
           'result' => FALSE,
         ),
-        7 => array(
+        self::TAG_ACTIVITIES => array(
           'title' => ts('Tag - add to activities'),
           'class' => 'CRM_Activity_Form_Task_AddToTag',
           'result' => FALSE,
         ),
-        8 => array(
+        self::UNTAG_ACTIVITIES => array(
           'title' => ts('Tag - remove from activities'),
           'class' => 'CRM_Activity_Form_Task_RemoveFromTag',
           'result' => FALSE,
@@ -122,7 +101,7 @@ public static function &tasks() {
         if (CRM_Core_Permission::check('access all cases and activities') ||
           CRM_Core_Permission::check('access my cases and activities')
         ) {
-          self::$_tasks[6] = array(
+          self::$_tasks[self::EMAIL_SMS] = array(
             'title' => ts('File on case'),
             'class' => 'CRM_Activity_Form_Task_FileOnCase',
             'result' => FALSE,
@@ -132,7 +111,7 @@ public static function &tasks() {
 
       // CRM-4418, check for delete
       if (!CRM_Core_Permission::check('delete activities')) {
-        unset(self::$_tasks[1]);
+        unset(self::$_tasks[self::DELETE_ACTIVITIES]);
       }
 
       CRM_Utils_Hook::searchTasks('activity', self::$_tasks);
@@ -143,21 +122,6 @@ public static function &tasks() {
   }
 
   /**
-   * These tasks are the core set of task titles on activity.
-   *
-   * @return array
-   *   the set of task titles
-   */
-  public static function &taskTitles() {
-    self::tasks();
-    $titles = array();
-    foreach (self::$_tasks as $id => $value) {
-      $titles[$id] = $value['title'];
-    }
-    return $titles;
-  }
-
-  /**
    * Show tasks selectively based on the permission level of the user.
    *
    * @param int $permission
@@ -165,19 +129,19 @@ public static function &taskTitles() {
    * @return array
    *   set of tasks that are valid for the user
    */
-  public static function &permissionedTaskTitles($permission) {
+  public static function permissionedTaskTitles($permission, $deleteContacts = FALSE) {
     $tasks = array();
     if ($permission == CRM_Core_Permission::EDIT) {
       $tasks = self::taskTitles();
     }
     else {
       $tasks = array(
-        3 => self::$_tasks[3]['title'],
+        self::EXPORT_ACTIVITIES => self::$_tasks[self::EXPORT_ACTIVITIES]['title'],
       );
 
       //CRM-4418,
       if (CRM_Core_Permission::check('delete activities')) {
-        $tasks[1] = self::$_tasks[1]['title'];
+        $tasks[self::DELETE_ACTIVITIES] = self::$_tasks[self::DELETE_ACTIVITIES]['title'];
       }
     }
     return $tasks;
@@ -195,8 +159,9 @@ public static function getTask($value) {
     self::tasks();
     if (!$value || !CRM_Utils_Array::value($value, self::$_tasks)) {
       // make the print task by default
-      $value = 2;
+      $value = self::PRINT_ACTIVITIES;
     }
+
     return array(
       self::$_tasks[$value]['class'],
       self::$_tasks[$value]['result'],
diff --git a/CRM/Campaign/Task.php b/CRM/Campaign/Task.php
index 2b12d19e004..c8fad8b44d7 100644
--- a/CRM/Campaign/Task.php
+++ b/CRM/Campaign/Task.php
@@ -36,22 +36,7 @@
  *
  * Used by the search forms.
  */
-class CRM_Campaign_Task {
-  const INTERVIEW = 1, RESERVE = 2, RELEASE = 3, PRINT_VOTERS = 4;
-
-  /**
-   * The task array
-   *
-   * @var array
-   */
-  static $_tasks = NULL;
-
-  /**
-   * The optional task array
-   *
-   * @var array
-   */
-  static $_optionalTasks = NULL;
+class CRM_Campaign_Task extends CRM_Core_Task {
 
   /**
    * These tasks are the core set of tasks that the user can perform
@@ -60,10 +45,10 @@ class CRM_Campaign_Task {
    * @return array
    *   the set of tasks for a group of voters.
    */
-  public static function &tasks() {
+  public static function tasks() {
     if (!(self::$_tasks)) {
       self::$_tasks = array(
-        1 => array(
+        self::INTERVIEW => array(
           'title' => ts('Record Respondents Interview'),
           'class' => array(
             'CRM_Campaign_Form_Task_Interview',
@@ -71,7 +56,7 @@ public static function &tasks() {
           ),
           'result' => FALSE,
         ),
-        2 => array(
+        self::RESERVE => array(
           'title' => ts('Reserve Respondents'),
           'class' => array(
             'CRM_Campaign_Form_Task_Reserve',
@@ -80,12 +65,12 @@ public static function &tasks() {
           ),
           'result' => FALSE,
         ),
-        3 => array(
+        self::RELEASE => array(
           'title' => ts('Release Respondents'),
           'class' => 'CRM_Campaign_Form_Task_Release',
           'result' => FALSE,
         ),
-        4 => array(
+        self::PRINT_VOTERS => array(
           'title' => ts('Print Respondents'),
           'class' => 'CRM_Campaign_Form_Task_Print',
           'result' => FALSE,
@@ -100,23 +85,6 @@ public static function &tasks() {
   }
 
   /**
-   * These tasks are the core set of task titles
-   * on voters.
-   *
-   * @return array
-   *   the set of task titles
-   */
-  public static function &taskTitles() {
-    self::tasks();
-    $titles = array();
-    foreach (self::$_tasks as $id => $value) {
-      $titles[$id] = $value['title'];
-    }
-
-    return $titles;
-  }
-
-  /**
    * Show tasks selectively based on the permission level
    * of the user
    *
@@ -125,7 +93,7 @@ public static function &taskTitles() {
    * @return array
    *   set of tasks that are valid for the user
    */
-  public static function &permissionedTaskTitles($permission) {
+  public static function permissionedTaskTitles($permission, $deleteContacts = FALSE) {
     $tasks = self::taskTitles();
 
     return $tasks;
@@ -143,8 +111,8 @@ public static function &permissionedTaskTitles($permission) {
   public static function getTask($value) {
     self::tasks();
     if (!$value || !CRM_Utils_Array::value($value, self::$_tasks)) {
-      // make the interview task by default
-      $value = 1;
+      // make the print task by default
+      $value = self::INTERVIEW;
     }
 
     return array(
diff --git a/CRM/Case/Task.php b/CRM/Case/Task.php
index 5af2aaaf1c9..6b1920d20d7 100644
--- a/CRM/Case/Task.php
+++ b/CRM/Case/Task.php
@@ -36,22 +36,7 @@
  *
  * Used by the search forms
  */
-class CRM_Case_Task {
-  const DELETE_CASES = 1, PRINT_CASES = 2, EXPORT_CASES = 3, RESTORE_CASES = 4;
-
-  /**
-   * The task array
-   *
-   * @var array
-   */
-  static $_tasks = NULL;
-
-  /**
-   * The optional task array
-   *
-   * @var array
-   */
-  static $_optionalTasks = NULL;
+class CRM_Case_Task extends CRM_Core_Task {
 
   /**
    * These tasks are the core set of tasks that the user can perform
@@ -60,20 +45,20 @@ class CRM_Case_Task {
    * @return array
    *   the set of tasks for a group of contacts
    */
-  public static function &tasks() {
+  public static function tasks() {
     if (!self::$_tasks) {
       self::$_tasks = array(
-        1 => array(
+        self::DELETE_CASES => array(
           'title' => ts('Delete cases'),
           'class' => 'CRM_Case_Form_Task_Delete',
           'result' => FALSE,
         ),
-        2 => array(
+        self::PRINT_CASES => array(
           'title' => ts('Print selected rows'),
           'class' => 'CRM_Case_Form_Task_Print',
           'result' => FALSE,
         ),
-        3 => array(
+        self::EXPORT_CASES => array(
           'title' => ts('Export cases'),
           'class' => array(
             'CRM_Export_Form_Select',
@@ -81,12 +66,12 @@ public static function &tasks() {
           ),
           'result' => FALSE,
         ),
-        4 => array(
+        self::RESTORE_CASES => array(
           'title' => ts('Restore cases'),
           'class' => 'CRM_Case_Form_Task_Restore',
           'result' => FALSE,
         ),
-        5 => array(
+        self::PDF_LETTER => array(
           'title' => ts('Print/merge Document'),
           'class' => 'CRM_Case_Form_Task_PDF',
           'result' => FALSE,
@@ -95,7 +80,7 @@ public static function &tasks() {
 
       //CRM-4418, check for delete
       if (!CRM_Core_Permission::check('delete in CiviCase')) {
-        unset(self::$_tasks[1]);
+        unset(self::$_tasks[self::DELETE_CASES]);
       }
 
       CRM_Utils_Hook::searchTasks('case', self::$_tasks);
@@ -106,32 +91,6 @@ public static function &tasks() {
   }
 
   /**
-   * These tasks are the core set of task titles.
-   *
-   * @return array
-   *   the set of task titles
-   */
-  public static function &taskTitles() {
-    self::tasks();
-    $titles = array();
-    foreach (self::$_tasks as $id => $value) {
-      $titles[$id] = $value['title'];
-    }
-    return $titles;
-  }
-
-  /**
-   * These tasks get added based on the context the user is in.
-   *
-   * @return array
-   *   the set of optional tasks for a group of contacts
-   */
-  public static function &optionalTaskTitle() {
-    $tasks = array();
-    return $tasks;
-  }
-
-  /**
    * Show tasks selectively based on the permission level.
    * of the user
    *
@@ -140,7 +99,7 @@ public static function &optionalTaskTitle() {
    * @return array
    *   set of tasks that are valid for the user
    */
-  public static function &permissionedTaskTitles($permission) {
+  public static function permissionedTaskTitles($permission, $deletedContacts = FALSE) {
     $tasks = array();
     if (($permission == CRM_Core_Permission::EDIT)
       || CRM_Core_Permission::check('access all cases and activities')
@@ -150,11 +109,11 @@ public static function &permissionedTaskTitles($permission) {
     }
     else {
       $tasks = array(
-        3 => self::$_tasks[3]['title'],
+        self::EXPORT_CASES => self::$_tasks[self::EXPORT_CASES]['title'],
       );
       //CRM-4418,
       if (CRM_Core_Permission::check('delete in CiviCase')) {
-        $tasks[1] = self::$_tasks[1]['title'];
+        $tasks[self::DELETE_CASES] = self::$_tasks[self::DELETE_CASES]['title'];
       }
     }
     return $tasks;
@@ -172,7 +131,7 @@ public static function getTask($value) {
     self::tasks();
     if (!$value || !CRM_Utils_Array::value($value, self::$_tasks)) {
       // make the print task by default
-      $value = 2;
+      $value = self::PRINT_CASES;
     }
 
     return array(
diff --git a/CRM/Contact/BAO/Group.php b/CRM/Contact/BAO/Group.php
index a64e698da00..979e4a78ad5 100644
--- a/CRM/Contact/BAO/Group.php
+++ b/CRM/Contact/BAO/Group.php
@@ -907,7 +907,7 @@ public static function getGroupList(&$params) {
     // CRM-9936
     $reservedPermission = CRM_Core_Permission::check('administer reserved groups');
 
-    $links = self::actionLinks();
+    $links = self::actionLinks($params);
 
     $allTypes = CRM_Core_OptionGroup::values('group_type');
     $values = array();
@@ -1279,12 +1279,17 @@ public static function whereClause(&$params, $sortBy = TRUE, $excludeHidden = TR
    * @return array
    *   array of action links
    */
-  public static function actionLinks() {
+  public static function actionLinks($params) {
+    // If component_mode is set we change the "View" link to match the requested component type
+    if (!isset($params['component_mode'])) {
+      $params['component_mode'] = CRM_Contact_BAO_Query::MODE_CONTACTS;
+    }
+    $modeValue = CRM_Contact_Form_Search::getModeValue($params['component_mode']);
     $links = array(
       CRM_Core_Action::VIEW => array(
-        'name' => ts('Contacts'),
+        'name' => $modeValue['selectorLabel'],
         'url' => 'civicrm/group/search',
-        'qs' => 'reset=1&force=1&context=smog&gid=%%id%%',
+        'qs' => 'reset=1&force=1&context=smog&gid=%%id%%&component_mode=' . $params['component_mode'],
         'title' => ts('Group Contacts'),
       ),
       CRM_Core_Action::UPDATE => array(
diff --git a/CRM/Contact/BAO/Query.php b/CRM/Contact/BAO/Query.php
index ab28ca3de95..d9494985601 100644
--- a/CRM/Contact/BAO/Query.php
+++ b/CRM/Contact/BAO/Query.php
@@ -56,7 +56,8 @@ class CRM_Contact_BAO_Query {
     // There is no 4,
     MODE_MEMBER = 8,
     MODE_EVENT = 16,
-    // No 32, no 64.
+    MODE_CONTACTSRELATED = 32,
+    // no 64.
     MODE_GRANT = 128,
     MODE_PLEDGEBANK = 256,
     MODE_PLEDGE = 512,
@@ -68,6 +69,13 @@ class CRM_Contact_BAO_Query {
     MODE_ALL = 17407;
 
   /**
+   * Constants for search operators
+   */
+  const
+    SEARCH_OPERATOR_AND = 'AND',
+    SEARCH_OPERATOR_OR = 'OR';
+
+  /**
    * The default set of return properties.
    *
    * @var array
diff --git a/CRM/Contact/Form/Search.php b/CRM/Contact/Form/Search.php
index 08a5019fd95..40b1fc9b3e7 100644
--- a/CRM/Contact/Form/Search.php
+++ b/CRM/Contact/Form/Search.php
@@ -201,7 +201,7 @@ public static function isSearchContext($context) {
   public static function setModeValues() {
     if (!self::$_modeValues) {
       self::$_modeValues = array(
-        1 => array(
+        CRM_Contact_BAO_Query::MODE_CONTACTS => array(
           'selectorName' => self::$_selectorName,
           'selectorLabel' => ts('Contacts'),
           'taskFile' => 'CRM/Contact/Form/Search/ResultTasks.tpl',
@@ -210,7 +210,7 @@ public static function setModeValues() {
           'resultContext' => NULL,
           'taskClassName' => 'CRM_Contact_Task',
         ),
-        2 => array(
+        CRM_Contact_BAO_Query::MODE_CONTRIBUTE => array(
           'selectorName' => 'CRM_Contribute_Selector_Search',
           'selectorLabel' => ts('Contributions'),
           'taskFile' => 'CRM/common/searchResultTasks.tpl',
@@ -219,7 +219,7 @@ public static function setModeValues() {
           'resultContext' => 'Search',
           'taskClassName' => 'CRM_Contribute_Task',
         ),
-        3 => array(
+        CRM_Contact_BAO_Query::MODE_EVENT => array(
           'selectorName' => 'CRM_Event_Selector_Search',
           'selectorLabel' => ts('Event Participants'),
           'taskFile' => 'CRM/common/searchResultTasks.tpl',
@@ -228,7 +228,7 @@ public static function setModeValues() {
           'resultContext' => 'Search',
           'taskClassName' => 'CRM_Event_Task',
         ),
-        4 => array(
+        CRM_Contact_BAO_Query::MODE_ACTIVITY => array(
           'selectorName' => 'CRM_Activity_Selector_Search',
           'selectorLabel' => ts('Activities'),
           'taskFile' => 'CRM/common/searchResultTasks.tpl',
@@ -237,7 +237,7 @@ public static function setModeValues() {
           'resultContext' => 'Search',
           'taskClassName' => 'CRM_Activity_Task',
         ),
-        5 => array(
+        CRM_Contact_BAO_Query::MODE_MEMBER => array(
           'selectorName' => 'CRM_Member_Selector_Search',
           'selectorLabel' => ts('Memberships'),
           'taskFile' => "CRM/common/searchResultTasks.tpl",
@@ -246,7 +246,7 @@ public static function setModeValues() {
           'resultContext' => 'Search',
           'taskClassName' => 'CRM_Member_Task',
         ),
-        6 => array(
+        CRM_Contact_BAO_Query::MODE_CASE => array(
           'selectorName' => 'CRM_Case_Selector_Search',
           'selectorLabel' => ts('Cases'),
           'taskFile' => "CRM/common/searchResultTasks.tpl",
@@ -255,7 +255,7 @@ public static function setModeValues() {
           'resultContext' => 'Search',
           'taskClassName' => 'CRM_Case_Task',
         ),
-        7 => array(
+        CRM_Contact_BAO_Query::MODE_CONTACTSRELATED => array(
           'selectorName' => self::$_selectorName,
           'selectorLabel' => ts('Related Contacts'),
           'taskFile' => 'CRM/Contact/Form/Search/ResultTasks.tpl',
@@ -264,7 +264,7 @@ public static function setModeValues() {
           'resultContext' => NULL,
           'taskClassName' => 'CRM_Contact_Task',
         ),
-        8 => array(
+        CRM_Contact_BAO_Query::MODE_MAILING => array(
           'selectorName' => 'CRM_Mailing_Selector_Search',
           'selectorLabel' => ts('Mailings'),
           'taskFile' => "CRM/common/searchResultTasks.tpl",
@@ -282,11 +282,11 @@ public static function setModeValues() {
    *
    * @return mixed
    */
-  public static function getModeValue($mode = 1) {
+  public static function getModeValue($mode = CRM_Contact_BAO_Query::MODE_CONTACTS) {
     self::setModeValues();
 
     if (!array_key_exists($mode, self::$_modeValues)) {
-      $mode = 1;
+      $mode = CRM_Contact_BAO_Query::MODE_CONTACTS;
     }
 
     return self::$_modeValues[$mode];
@@ -298,25 +298,36 @@ public static function getModeValue($mode = 1) {
   public static function getModeSelect() {
     self::setModeValues();
 
-    $select = array();
+    $componentModes = array();
     foreach (self::$_modeValues as $id => & $value) {
-      $select[$id] = $value['selectorLabel'];
+      $componentModes[$id] = $value['selectorLabel'];
     }
 
-    // unset contributions or participants if user does not have
-    // permission on them
+    $enabledComponents = CRM_Core_Component::getEnabledComponents();
+
+    // unset disabled components
+    if (!array_key_exists('CiviMail', $enabledComponents)) {
+      unset($componentModes[CRM_Contact_BAO_Query::MODE_MAILING]);
+    }
+
+    // unset contributions or participants if user does not have permission on them
     if (!CRM_Core_Permission::access('CiviContribute')) {
-      unset($select['2']);
+      unset($componentModes[CRM_Contact_BAO_Query::MODE_CONTRIBUTE]);
     }
 
     if (!CRM_Core_Permission::access('CiviEvent')) {
-      unset($select['3']);
+      unset($componentModes[CRM_Contact_BAO_Query::MODE_EVENT]);
+    }
+
+    if (!CRM_Core_Permission::access('CiviMember')) {
+      unset($componentModes[CRM_Contact_BAO_Query::MODE_MEMBER]);
     }
 
     if (!CRM_Core_Permission::check('view all activities')) {
-      unset($select['4']);
+      unset($componentModes[CRM_Contact_BAO_Query::MODE_ACTIVITY]);
     }
-    return $select;
+
+    return $componentModes;
   }
 
   /**
@@ -328,7 +339,7 @@ public function buildTaskList() {
     if ($this->_context !== 'amtg') {
       $permission = CRM_Core_Permission::getPermission();
 
-      if ($this->_componentMode == 1 || $this->_componentMode == 7) {
+      if ($this->_componentMode == CRM_Contact_BAO_Query::MODE_CONTACTS || $this->_componentMode == CRM_Contact_BAO_Query::MODE_CONTACTSRELATED) {
         $this->_taskList += CRM_Contact_Task::permissionedTaskTitles($permission,
           CRM_Utils_Array::value('deleted_contacts', $this->_formValues)
         );
@@ -360,7 +371,7 @@ public function buildQuickForm() {
     $permission = CRM_Core_Permission::getPermission();
     // some tasks.. what do we want to do with the selected contacts ?
     $tasks = array();
-    if ($this->_componentMode == 1 || $this->_componentMode == 7) {
+    if ($this->_componentMode == CRM_Contact_BAO_Query::MODE_CONTACTS || $this->_componentMode == CRM_Contact_BAO_Query::MODE_CONTACTSRELATED) {
       $tasks += CRM_Contact_Task::permissionedTaskTitles($permission,
         CRM_Utils_Array::value('deleted_contacts', $this->_formValues)
       );
@@ -474,7 +485,7 @@ public function buildQuickForm() {
     $selectedContactIds = array();
     $qfKeyParam = CRM_Utils_Array::value('qfKey', $this->_formValues);
     // We use ajax to handle selections only if the search results component_mode is set to "contacts"
-    if ($qfKeyParam && ($this->get('component_mode') <= 1 || $this->get('component_mode') == 7)) {
+    if ($qfKeyParam && ($this->get('component_mode') <= CRM_Contact_BAO_Query::MODE_CONTACTS || $this->get('component_mode') == CRM_Contact_BAO_Query::MODE_CONTACTSRELATED)) {
       $this->addClass('crm-ajax-selection-form');
       $qfKeyParam = "civicrm search {$qfKeyParam}";
       $selectedContactIdsArr = CRM_Core_BAO_PrevNextCache::getSelection($qfKeyParam);
@@ -515,8 +526,8 @@ public function preProcess() {
     $this->_ssID = CRM_Utils_Request::retrieve('ssID', 'Positive', $this);
     $this->_sortByCharacter = CRM_Utils_Request::retrieve('sortByCharacter', 'String', $this);
     $this->_ufGroupID = CRM_Utils_Request::retrieve('id', 'Positive', $this);
-    $this->_componentMode = CRM_Utils_Request::retrieve('component_mode', 'Positive', $this, FALSE, 1, $_REQUEST);
-    $this->_operator = CRM_Utils_Request::retrieve('operator', 'String', $this, FALSE, 1, $_REQUEST, 'AND');
+    $this->_componentMode = CRM_Utils_Request::retrieve('component_mode', 'Positive', $this, FALSE, CRM_Contact_BAO_Query::MODE_CONTACTS, $_REQUEST);
+    $this->_operator = CRM_Utils_Request::retrieve('operator', 'String', $this, FALSE, CRM_Contact_BAO_Query::SEARCH_OPERATOR_AND, 'REQUEST');
 
     /**
      * set the button names
@@ -648,9 +659,9 @@ public function preProcess() {
     $this->assign('id',
       CRM_Utils_Array::value('uf_group_id', $this->_formValues)
     );
-    $operator = CRM_Utils_Array::value('operator', $this->_formValues, 'AND');
+    $operator = CRM_Utils_Array::value('operator', $this->_formValues, CRM_Contact_BAO_Query::SEARCH_OPERATOR_AND);
     $this->set('queryOperator', $operator);
-    if ($operator == 'OR') {
+    if ($operator == CRM_Contact_BAO_Query::SEARCH_OPERATOR_OR) {
       $this->assign('operator', ts('OR'));
     }
     else {
diff --git a/CRM/Contact/Form/Search/Criteria.php b/CRM/Contact/Form/Search/Criteria.php
index f876e40e812..b6b581744e1 100644
--- a/CRM/Contact/Form/Search/Criteria.php
+++ b/CRM/Contact/Form/Search/Criteria.php
@@ -158,32 +158,6 @@ public static function basic(&$form) {
     );
 
     $componentModes = CRM_Contact_Form_Search::getModeSelect();
-    $enabledComponents = CRM_Core_Component::getEnabledComponents();
-
-    // unset disabled components that must should have been enabled
-    // to the option be viable
-    if (!array_key_exists('CiviMail', $enabledComponents)) {
-      unset($componentModes['8']);
-    }
-
-    // unset contributions or participants if user does not have
-    // permission on them
-    if (!CRM_Core_Permission::access('CiviContribute')) {
-      unset($componentModes['2']);
-    }
-
-    if (!CRM_Core_Permission::access('CiviEvent')) {
-      unset($componentModes['3']);
-    }
-
-    if (!CRM_Core_Permission::access('CiviMember')) {
-      unset($componentModes['5']);
-    }
-
-    if (!CRM_Core_Permission::check('view all activities')) {
-      unset($componentModes['4']);
-    }
-
     if (count($componentModes) > 1) {
       $form->add('select',
         'component_mode',
@@ -198,8 +172,8 @@ public static function basic(&$form) {
       'operator',
       ts('Search Operator'),
       array(
-        'AND' => ts('AND'),
-        'OR' => ts('OR'),
+        CRM_Contact_BAO_Query::SEARCH_OPERATOR_AND => ts('AND'),
+        CRM_Contact_BAO_Query::SEARCH_OPERATOR_OR => ts('OR'),
       ),
       array('allowClear' => FALSE)
     );
diff --git a/CRM/Contact/Form/Task.php b/CRM/Contact/Form/Task.php
index 8b8b9e28876..724f3ded961 100644
--- a/CRM/Contact/Form/Task.php
+++ b/CRM/Contact/Form/Task.php
@@ -104,7 +104,7 @@ public static function preProcessCommon(&$form, $useTable = FALSE) {
     if ($isStandAlone) {
       list($form->_task, $title) = CRM_Contact_Task::getTaskAndTitleByClass(get_class($form));
       if (!array_key_exists($form->_task, CRM_Contact_Task::permissionedTaskTitles(CRM_Core_Permission::getPermission()))) {
-        CRM_Core_Error::fatal(ts('You do not have permission to access this page.'));
+        CRM_Core_Error::statusBounce(ts('You do not have permission to access this page.'));
       }
       $form->_contactIds = explode(',', CRM_Utils_Request::retrieve('cids', 'String', $form, TRUE));
       if (empty($form->_contactIds)) {
diff --git a/CRM/Contact/Form/Task/SaveSearch.php b/CRM/Contact/Form/Task/SaveSearch.php
index bff3f0d1291..028413fb2c8 100644
--- a/CRM/Contact/Form/Task/SaveSearch.php
+++ b/CRM/Contact/Form/Task/SaveSearch.php
@@ -66,9 +66,12 @@ public function preProcess() {
       $values = $this->controller->exportValues('Basic');
     }
 
+    // Get Task name
+    $modeValue = CRM_Contact_Form_Search::getModeValue($values['component_mode']);
+    $className = $modeValue['taskClassName'];
+    $taskList = $className::taskTitles();
     $this->_task = CRM_Utils_Array::value('task', $values);
-    $crmContactTaskTasks = CRM_Contact_Task::taskTitles();
-    $this->assign('taskName', CRM_Utils_Array::value($this->_task, $crmContactTaskTasks));
+    $this->assign('taskName', CRM_Utils_Array::value($this->_task, $taskList));
   }
 
   /**
@@ -158,10 +161,7 @@ public function postProcess() {
       if (!$this->_id) {
         //save record in mapping table
         $mappingParams = array(
-          'mapping_type_id' => CRM_Core_OptionGroup::getValue('mapping_type',
-            'Search Builder',
-            'name'
-          ),
+          'mapping_type_id' => CRM_Core_PseudoConstant::getKey('CRM_Core_BAO_Mapping', 'mapping_type_id', 'Search Builder'),
         );
         $mapping = CRM_Core_BAO_Mapping::add($mappingParams);
         $mappingId = $mapping->id;
@@ -211,12 +211,9 @@ public function postProcess() {
     $params = array();
     $params['title'] = $formValues['title'];
     $params['description'] = $formValues['description'];
-    if (isset($formValues['group_type']) &&
-      is_array($formValues['group_type'])
-    ) {
+    if (isset($formValues['group_type']) && is_array($formValues['group_type']) && count($formValues['group_type'])) {
       $params['group_type'] = CRM_Core_DAO::VALUE_SEPARATOR . implode(CRM_Core_DAO::VALUE_SEPARATOR,
-          array_keys($formValues['group_type'])
-        ) . CRM_Core_DAO::VALUE_SEPARATOR;
+          array_keys($formValues['group_type'])) . CRM_Core_DAO::VALUE_SEPARATOR;
     }
     else {
       $params['group_type'] = '';
@@ -240,10 +237,7 @@ public function postProcess() {
         'id' => $mappingId,
         'name' => CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Group', $group->id, 'name', 'id'),
         'description' => CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Group', $group->id, 'description', 'id'),
-        'mapping_type_id' => CRM_Core_OptionGroup::getValue('mapping_type',
-          'Search Builder',
-          'name'
-        ),
+        'mapping_type_id' => CRM_Core_PseudoConstant::getKey('CRM_Core_BAO_Mapping', 'mapping_type_id', 'Search Builder'),
       );
       CRM_Core_BAO_Mapping::add($mappingParams);
     }
diff --git a/CRM/Contact/StateMachine/Search.php b/CRM/Contact/StateMachine/Search.php
index 61bed6a4829..07e64bb8712 100644
--- a/CRM/Contact/StateMachine/Search.php
+++ b/CRM/Contact/StateMachine/Search.php
@@ -103,15 +103,10 @@ public function taskName($controller, $formName = 'Search') {
     }
     $this->_controller->set('task', $value);
 
-    if ($value) {
-      $componentMode = $this->_controller->get('component_mode');
-      $modeValue = CRM_Contact_Form_Search::getModeValue($componentMode);
-      $taskClassName = $modeValue['taskClassName'];
-      return $taskClassName::getTask($value);
-    }
-    else {
-      return CRM_Contact_Task::getTask($value);
-    }
+    $componentMode = $this->_controller->get('component_mode');
+    $modeValue = CRM_Contact_Form_Search::getModeValue($componentMode);
+    $taskClassName = $modeValue['taskClassName'];
+    return $taskClassName::getTask($value);
   }
 
   /**
diff --git a/CRM/Contact/Task.php b/CRM/Contact/Task.php
index d5afbac86de..10f0c243611 100644
--- a/CRM/Contact/Task.php
+++ b/CRM/Contact/Task.php
@@ -34,50 +34,9 @@
 /**
  * Class to represent the actions that can be performed on a group of contacts used by the search forms.
  */
-class CRM_Contact_Task {
-  const
-    GROUP_CONTACTS = 1,
-    REMOVE_CONTACTS = 2,
-    TAG_CONTACTS = 3,
-    REMOVE_TAGS = 4,
-    EXPORT_CONTACTS = 5,
-    EMAIL_CONTACTS = 6,
-    SMS_CONTACTS = 7,
-    DELETE_CONTACTS = 8,
-    HOUSEHOLD_CONTACTS = 9,
-    ORGANIZATION_CONTACTS = 10,
-    RECORD_CONTACTS = 11,
-    MAP_CONTACTS = 12,
-    SAVE_SEARCH = 13,
-    SAVE_SEARCH_UPDATE = 14,
-    PRINT_CONTACTS = 15,
-    LABEL_CONTACTS = 16,
-    BATCH_UPDATE = 17,
-    ADD_EVENT = 18,
-    PRINT_FOR_CONTACTS = 19,
-    CREATE_MAILING = 20,
-    MERGE_CONTACTS = 21,
-    EMAIL_UNHOLD = 22,
-    RESTORE = 23,
-    DELETE_PERMANENTLY = 24,
-    COMMUNICATION_PREFS = 25,
-    INDIVIDUAL_CONTACTS = 26;
+class CRM_Contact_Task extends CRM_Core_Task {
 
-  /**
-   * The task array
-   *
-   * @var array
-   */
-  static $_tasks = NULL;
-
-  /**
-   * The optional task array
-   *
-   * @var array
-   */
-  static $_optionalTasks = NULL;
-
-  public static function initTasks() {
+  public static function tasks() {
     if (!self::$_tasks) {
       self::$_tasks = array(
         self::GROUP_CONTACTS => array(
@@ -109,7 +68,10 @@ public static function initTasks() {
           'result' => FALSE,
         ),
         self::EMAIL_CONTACTS => array(
-          'title' => ts('Email - send now (to %1 or less)', array(1 => Civi::settings()->get('simple_mail_limit'))),
+          'title' => ts('Email - send now (to %1 or less)', array(
+            1 => Civi::settings()
+              ->get('simple_mail_limit'),
+          )),
           'class' => 'CRM_Contact_Form_Task_Email',
           'result' => TRUE,
           'url' => 'civicrm/task/send-email',
@@ -270,43 +232,11 @@ public static function initTasks() {
         );
       }
 
-      self::$_tasks += CRM_Core_Component::taskList();
-
       CRM_Utils_Hook::searchTasks('contact', self::$_tasks);
-
-    }
-  }
-
-  /**
-   * These tasks are the core set of tasks that the user can perform
-   * on a contact / group of contacts
-   *
-   * @return array
-   *   the set of tasks for a group of contacts
-   */
-  public static function &taskTitles() {
-    self::initTasks();
-
-    $titles = array();
-    foreach (self::$_tasks as $id => $value) {
-      $titles[$id] = $value['title'];
-    }
-
-    // hack unset update saved search
-    unset($titles[self::SAVE_SEARCH_UPDATE]);
-
-    if (!CRM_Utils_Mail::validOutBoundMail()) {
-      unset($titles[self::EMAIL_CONTACTS]);
-      unset($titles[self::CREATE_MAILING]);
+      asort(self::$_tasks);
     }
 
-    // CRM-6806
-    if (!CRM_Core_Permission::check('access deleted contacts') ||
-      !CRM_Core_Permission::check('delete contacts')
-    ) {
-      unset($titles[self::DELETE_PERMANENTLY]);
-    }
-    return $titles;
+    return self::$_tasks;
   }
 
   /**
@@ -320,8 +250,8 @@ public static function &taskTitles() {
    * @return array
    *   set of tasks that are valid for the user
    */
-  public static function &permissionedTaskTitles($permission, $deletedContacts = FALSE) {
-    self::initTasks();
+  public static function permissionedTaskTitles($permission, $deletedContacts = FALSE) {
+    self::tasks();
     $tasks = array();
     if ($deletedContacts) {
       if (CRM_Core_Permission::check('access deleted contacts')) {
@@ -357,58 +287,18 @@ public static function &permissionedTaskTitles($permission, $deletedContacts = F
   }
 
   /**
-   * These tasks get added based on the context the user is in.
-   *
-   * @return array
-   *   the set of optional tasks for a group of contacts
-   */
-  public static function &optionalTaskTitle() {
-    $tasks = array(
-      self::SAVE_SEARCH_UPDATE => self::$_tasks[self::SAVE_SEARCH_UPDATE]['title'],
-    );
-    return $tasks;
-  }
-
-  /**
    * @param $value
    *
    * @return array
    */
   public static function getTask($value) {
-    self::initTasks();
+    self::tasks();
 
     if (!CRM_Utils_Array::value($value, self::$_tasks)) {
       // make it the print task by default
       $value = self::PRINT_CONTACTS;
     }
-    return array(
-      CRM_Utils_Array::value('class', self::$_tasks[$value]),
-      CRM_Utils_Array::value('result', self::$_tasks[$value]),
-    );
-  }
-
-  /**
-   * Function to return the task information on basis of provided task's form name
-   *
-   * @param string $className
-   *
-   * @return array
-   */
-  public static function getTaskAndTitleByClass($className) {
-    self::initTasks();
-
-    foreach (self::$_tasks as $task => $value) {
-      if (!empty($value['url']) && (
-        (is_array($value['class']) && in_array($className, $value['class'])) ||
-         ($value['class'] == $className)
-        )
-      ) {
-        return array(
-          $task,
-          CRM_Utils_Array::value('title', $value),
-        );
-      }
-    }
+    return parent::getTask($value);
   }
 
 }
diff --git a/CRM/Contribute/Task.php b/CRM/Contribute/Task.php
index 9c4f20c5ad5..89ab544cd84 100644
--- a/CRM/Contribute/Task.php
+++ b/CRM/Contribute/Task.php
@@ -36,22 +36,7 @@
  *
  * Used by the search forms.
  */
-class CRM_Contribute_Task {
-  const DELETE_CONTRIBUTIONS = 1, PRINT_CONTRIBUTIONS = 2, EXPORT_CONTRIBUTIONS = 3, BATCH_CONTRIBUTIONS = 4, EMAIL_CONTACTS = 5, UPDATE_STATUS = 6, PDF_RECEIPT = 7;
-
-  /**
-   * The task array
-   *
-   * @var array
-   */
-  static $_tasks = NULL;
-
-  /**
-   * The optional task array
-   *
-   * @var array
-   */
-  static $_optionalTasks = NULL;
+class CRM_Contribute_Task extends CRM_Core_Task {
 
   /**
    * These tasks are the core set of tasks that the user can perform
@@ -63,17 +48,17 @@ class CRM_Contribute_Task {
   public static function tasks() {
     if (!(self::$_tasks)) {
       self::$_tasks = array(
-        1 => array(
+        self::DELETE_CONTRIBUTIONS => array(
           'title' => ts('Delete contributions'),
           'class' => 'CRM_Contribute_Form_Task_Delete',
           'result' => FALSE,
         ),
-        2 => array(
+        self::PRINT_CONTRIBUTIONS => array(
           'title' => ts('Print selected rows'),
           'class' => 'CRM_Contribute_Form_Task_Print',
           'result' => FALSE,
         ),
-        3 => array(
+        self::EXPORT_CONTRIBUTIONS => array(
           'title' => ts('Export contributions'),
           'class' => array(
             'CRM_Export_Form_Select',
@@ -81,7 +66,7 @@ public static function tasks() {
           ),
           'result' => FALSE,
         ),
-        4 => array(
+        self::BATCH_CONTRIBUTIONS => array(
           'title' => ts('Update multiple contributions'),
           'class' => array(
             'CRM_Contribute_Form_Task_PickProfile',
@@ -89,27 +74,27 @@ public static function tasks() {
           ),
           'result' => TRUE,
         ),
-        5 => array(
+        self::EMAIL_CONTACTS => array(
           'title' => ts('Email - send now'),
           'class' => 'CRM_Contribute_Form_Task_Email',
           'result' => TRUE,
         ),
-        6 => array(
+        self::UPDATE_STATUS => array(
           'title' => ts('Update pending contribution status'),
           'class' => 'CRM_Contribute_Form_Task_Status',
           'result' => TRUE,
         ),
-        7 => array(
+        self::PDF_RECEIPT => array(
           'title' => ts('Receipts - print or email'),
           'class' => 'CRM_Contribute_Form_Task_PDF',
           'result' => FALSE,
         ),
-        8 => array(
+        self::PDF_THANKYOU => array(
           'title' => ts('Thank-you letters - print or email'),
           'class' => 'CRM_Contribute_Form_Task_PDFLetter',
           'result' => FALSE,
         ),
-        9 => array(
+        self::PDF_INVOICE => array(
           'title' => ts('Invoices - print or email'),
           'class' => 'CRM_Contribute_Form_Task_Invoice',
           'result' => FALSE,
@@ -118,18 +103,18 @@ public static function tasks() {
 
       //CRM-4418, check for delete
       if (!CRM_Core_Permission::check('delete in CiviContribute')) {
-        unset(self::$_tasks[1]);
+        unset(self::$_tasks[self::DELETE_CONTRIBUTIONS]);
       }
       //CRM-12920 - check for edit permission
       if (!CRM_Core_Permission::check('edit contributions')) {
-        unset(self::$_tasks[4], self::$_tasks[6]);
+        unset(self::$_tasks[self::BATCH_CONTRIBUTIONS], self::$_tasks[self::UPDATE_STATUS]);
       }
 
       // remove action "Invoices - print or email"
       $invoiceSettings = Civi::settings()->get('contribution_invoice_settings');
       $invoicing = CRM_Utils_Array::value('invoicing', $invoiceSettings);
       if (!$invoicing) {
-        unset(self::$_tasks[9]);
+        unset(self::$_tasks[self::PDF_INVOICE]);
       }
 
       CRM_Utils_Hook::searchTasks('contribution', self::$_tasks);
@@ -140,22 +125,6 @@ public static function tasks() {
   }
 
   /**
-   * These tasks are the core set of task titles
-   * on contributors
-   *
-   * @return array
-   *   the set of task titles
-   */
-  public static function &taskTitles() {
-    self::tasks();
-    $titles = array();
-    foreach (self::$_tasks as $id => $value) {
-      $titles[$id] = $value['title'];
-    }
-    return $titles;
-  }
-
-  /**
    * Show tasks selectively based on the permission level
    * of the user
    *
@@ -166,7 +135,7 @@ public static function &taskTitles() {
    * @return array
    *   set of tasks that are valid for the user
    */
-  public static function &permissionedTaskTitles($permission, $softCreditFiltering = FALSE) {
+  public static function permissionedTaskTitles($permission, $softCreditFiltering = FALSE) {
     $tasks = array();
     if (($permission == CRM_Core_Permission::EDIT)
       || CRM_Core_Permission::check('edit contributions')
@@ -175,18 +144,18 @@ public static function &permissionedTaskTitles($permission, $softCreditFiltering
     }
     else {
       $tasks = array(
-        3 => self::$_tasks[3]['title'],
-        5 => self::$_tasks[5]['title'],
-        7 => self::$_tasks[7]['title'],
+        self::EXPORT_CONTRIBUTIONS => self::$_tasks[self::EXPORT_CONTRIBUTIONS]['title'],
+        self::EMAIL_CONTACTS => self::$_tasks[self::EMAIL_CONTACTS]['title'],
+        self::PDF_RECEIPT => self::$_tasks[self::PDF_RECEIPT]['title'],
       );
 
       //CRM-4418,
       if (CRM_Core_Permission::check('delete in CiviContribute')) {
-        $tasks[1] = self::$_tasks[1]['title'];
+        $tasks[self::DELETE_CONTRIBUTIONS] = self::$_tasks[self::DELETE_CONTRIBUTIONS]['title'];
       }
     }
     if ($softCreditFiltering) {
-      unset($tasks[4], $tasks[7]);
+      unset($tasks[self::BATCH_CONTRIBUTIONS], $tasks[self::PDF_RECEIPT]);
     }
     return $tasks;
   }
@@ -204,17 +173,9 @@ public static function getTask($value) {
     self::tasks();
     if (!$value || !CRM_Utils_Array::value($value, self::$_tasks)) {
       // make the print task by default
-      $value = 2;
-    }
-    // this is possible since hooks can inject a task
-    // CRM-13697
-    if (!isset(self::$_tasks[$value]['result'])) {
-      self::$_tasks[$value]['result'] = NULL;
+      $value = self::PRINT_CONTRIBUTIONS;
     }
-    return array(
-      self::$_tasks[$value]['class'],
-      self::$_tasks[$value]['result'],
-    );
+    return parent::getTask($value);
   }
 
 }
diff --git a/CRM/Core/Component.php b/CRM/Core/Component.php
index b9de5379701..143a7ab49d3 100644
--- a/CRM/Core/Component.php
+++ b/CRM/Core/Component.php
@@ -406,21 +406,6 @@ public static function &contactSubTypeProperties($subType, $op) {
   }
 
   /**
-   * FIXME: This function does not appear to do anything. The is_array() check runs on a bunch of objects and (always?) returns false
-   */
-  public static function &taskList() {
-    $info = self::_info();
-
-    $tasks = array();
-    foreach ($info as $name => $value) {
-      if (is_array($info[$name]) && isset($info[$name]['task'])) {
-        $tasks += $info[$name]['task'];
-      }
-    }
-    return $tasks;
-  }
-
-  /**
    * Handle table dependencies of components.
    *
    * @param array $tables
diff --git a/CRM/Core/Task.php b/CRM/Core/Task.php
new file mode 100644
index 00000000000..6e93659b32a
--- /dev/null
+++ b/CRM/Core/Task.php
@@ -0,0 +1,232 @@
+<?php
+/*
+ +--------------------------------------------------------------------+
+ | CiviCRM version 4.7                                                |
+ +--------------------------------------------------------------------+
+ | Copyright CiviCRM LLC (c) 2004-2017                                |
+ +--------------------------------------------------------------------+
+ | This file is a part of CiviCRM.                                    |
+ |                                                                    |
+ | CiviCRM is free software; you can copy, modify, and distribute it  |
+ | under the terms of the GNU Affero General Public License           |
+ | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
+ |                                                                    |
+ | CiviCRM is distributed in the hope that it will be useful, but     |
+ | WITHOUT ANY WARRANTY; without even the implied warranty of         |
+ | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
+ | See the GNU Affero General Public License for more details.        |
+ |                                                                    |
+ | You should have received a copy of the GNU Affero General Public   |
+ | License and the CiviCRM Licensing Exception along                  |
+ | with this program; if not, contact CiviCRM LLC                     |
+ | at info[AT]civicrm[DOT]org. If you have questions about the        |
+ | GNU Affero General Public License or the licensing of CiviCRM,     |
+ | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+ +--------------------------------------------------------------------+
+ */
+
+/**
+ *
+ * @package CRM
+ * @copyright CiviCRM LLC (c) 2004-2017
+ */
+
+/**
+ * Class to represent the actions that can be performed on a group of contacts used by the search forms.
+ */
+abstract class CRM_Core_Task {
+  const
+    // Contact tasks
+    REMOVE_CONTACTS = 2,
+    TAG_CONTACTS = 3,
+    REMOVE_TAGS = 4,
+    EXPORT_CONTACTS = 5,
+    EMAIL_CONTACTS = 6,
+    SMS_CONTACTS = 7,
+    DELETE_CONTACTS = 8,
+    HOUSEHOLD_CONTACTS = 9,
+    ORGANIZATION_CONTACTS = 10,
+    RECORD_CONTACTS = 11,
+    MAP_CONTACTS = 12,
+    SAVE_SEARCH = 13,
+    SAVE_SEARCH_UPDATE = 14,
+    PRINT_CONTACTS = 15,
+    LABEL_CONTACTS = 16,
+    BATCH_UPDATE = 17,
+    ADD_EVENT = 18,
+    PRINT_FOR_CONTACTS = 19,
+    CREATE_MAILING = 20,
+    MERGE_CONTACTS = 21,
+    EMAIL_UNHOLD = 22,
+    RESTORE = 23,
+    DELETE_PERMANENTLY = 24,
+    COMMUNICATION_PREFS = 25,
+    INDIVIDUAL_CONTACTS = 26,
+    GROUP_CONTACTS = 27,
+    // Member tasks
+    DELETE_MEMBERS = 28,
+    PRINT_MEMBERS = 29,
+    EXPORT_MEMBERS = 30,
+    EMAIL_MEMBERS = 31,
+    BATCH_MEMBERS = 32,
+    LABEL_MEMBERS = 33,
+    PRINT_FOR_MEMBERS = 34,
+    // Event tasks
+    DELETE_EVENTS = 35,
+    PRINT_EVENTS = 36,
+    EXPORT_EVENTS = 37,
+    BATCH_EVENTS = 38,
+    CANCEL_REGISTRATION = 39,
+    PARTICIPANT_STATUS = 40,
+    // Contribution tasks
+    DELETE_CONTRIBUTIONS = 41,
+    PRINT_CONTRIBUTIONS = 42,
+    EXPORT_CONTRIBUTIONS = 43,
+    BATCH_CONTRIBUTIONS = 44,
+    UPDATE_STATUS = 45,
+    PDF_RECEIPT = 46,
+    PDF_THANKYOU = 47,
+    PDF_INVOICE = 48,
+    // Case tasks
+    DELETE_CASES = 49,
+    PRINT_CASES = 50,
+    EXPORT_CASES = 51,
+    RESTORE_CASES = 52,
+    PDF_LETTER = 53,
+    // Campaign tasks
+    INTERVIEW = 54,
+    RESERVE = 55,
+    RELEASE = 56,
+    PRINT_VOTERS = 57,
+    // Activity tasks
+    DELETE_ACTIVITIES = 58,
+    PRINT_ACTIVITIES = 59,
+    EXPORT_ACTIVITIES = 60,
+    BATCH_ACTIVITIES = 61,
+    EMAIL_SMS = 62,
+    TAG_ACTIVITIES = 63,
+    UNTAG_ACTIVITIES = 64,
+    // Mailing tasks
+    PRINT_MAILINGS = 65,
+    // Pledge tasks
+    DELETE_PLEDGES = 66,
+    PRINT_PLEDGES = 67,
+    EXPORT_PLEDGES = 68;
+
+  /**
+   * The task array
+   *
+   * @var array
+   */
+  static $_tasks = NULL;
+
+  /**
+   * The optional task array
+   *
+   * @var array
+   */
+  static $_optionalTasks = NULL;
+
+  abstract public static function tasks();
+
+  /**
+   * These tasks are the core set of tasks that the user can perform
+   * on a contact / group of contacts
+   *
+   * @return array
+   *   the set of tasks for a group of contacts
+   */
+  public static function taskTitles() {
+    static::tasks();
+
+    $titles = array();
+    foreach (self::$_tasks as $id => $value) {
+      $titles[$id] = $value['title'];
+    }
+
+    // hack unset update saved search
+    unset($titles[self::SAVE_SEARCH_UPDATE]);
+
+    if (!CRM_Utils_Mail::validOutBoundMail()) {
+      unset($titles[self::EMAIL_CONTACTS]);
+      unset($titles[self::CREATE_MAILING]);
+    }
+
+    // CRM-6806
+    if (!CRM_Core_Permission::check('access deleted contacts') ||
+      !CRM_Core_Permission::check('delete contacts')
+    ) {
+      unset($titles[self::DELETE_PERMANENTLY]);
+    }
+    return $titles;
+  }
+
+  /**
+   * Show tasks selectively based on the permission level
+   * of the user
+   *
+   * @param int $permission
+   * @param bool $deletedContacts
+   *   Are these tasks for operating on deleted contacts?.
+   *
+   * @return array
+   *   set of tasks that are valid for the user
+   */
+  abstract public static function permissionedTaskTitles($permission, $deletedContacts = FALSE);
+
+  /**
+   * These tasks get added based on the context the user is in.
+   *
+   * @return array
+   *   the set of optional tasks for a group of contacts
+   */
+  public static function optionalTaskTitle() {
+    $tasks = array(
+      self::SAVE_SEARCH_UPDATE => self::$_tasks[self::SAVE_SEARCH_UPDATE]['title'],
+    );
+    return $tasks;
+  }
+
+  /**
+   * @param $value
+   *
+   * @return array
+   */
+  public static function getTask($value) {
+    static::tasks();
+
+    if (!CRM_Utils_Array::value($value, self::$_tasks)) {
+      // Children can specify a default task (eg. print), we don't here
+      return array();
+    }
+    return array(
+      CRM_Utils_Array::value('class', self::$_tasks[$value]),
+      CRM_Utils_Array::value('result', self::$_tasks[$value]),
+    );
+  }
+
+  /**
+   * Function to return the task information on basis of provided task's form name
+   *
+   * @param string $className
+   *
+   * @return array
+   */
+  public static function getTaskAndTitleByClass($className) {
+    static::tasks();
+
+    foreach (self::$_tasks as $task => $value) {
+      if (!empty($value['url']) && (
+          (is_array($value['class']) && in_array($className, $value['class'])) ||
+          ($value['class'] == $className)
+        )
+      ) {
+        return array(
+          $task,
+          CRM_Utils_Array::value('title', $value),
+        );
+      }
+    }
+  }
+
+}
diff --git a/CRM/Event/Form/Task.php b/CRM/Event/Form/Task.php
index 231089cfc53..a06174dc300 100644
--- a/CRM/Event/Form/Task.php
+++ b/CRM/Event/Form/Task.php
@@ -88,8 +88,11 @@ public static function preProcessCommon(&$form, $useTable = FALSE) {
     $values = $form->controller->exportValues($form->get('searchFormName'));
 
     $form->_task = $values['task'];
-    $eventTasks = CRM_Event_Task::tasks();
-    $form->assign('taskName', $eventTasks[$form->_task]);
+    $tasks = CRM_Event_Task::permissionedTaskTitles(CRM_Core_Permission::getPermission());
+    if (!array_key_exists($form->_task, CRM_Event_Task::permissionedTaskTitles(CRM_Core_Permission::getPermission()))) {
+      CRM_Core_Error::statusBounce(ts('You do not have permission to access this page.'));
+    }
+    $form->assign('taskName', $tasks[$form->_task]);
 
     $ids = array();
     if ($values['radio_ts'] == 'ts_sel') {
diff --git a/CRM/Event/Task.php b/CRM/Event/Task.php
index 4bc04bf7bd5..2c11434aad2 100644
--- a/CRM/Event/Task.php
+++ b/CRM/Event/Task.php
@@ -38,26 +38,7 @@
  * used by the search forms
  *
  */
-class CRM_Event_Task {
-  // Value for SAVE_SEARCH is set to 13 in accordance with CRM_Contact_Task::SAVE_SEARCH
-  const DELETE_EVENTS = 1, PRINT_EVENTS = 2, EXPORT_EVENTS = 3, BATCH_EVENTS = 4, CANCEL_REGISTRATION = 5, EMAIL_CONTACTS = 6,
-    // Value for LABEL_CONTACTS is set to 16 in accordance with CRM_Contact_Task::LABEL_CONTACTS
-    SAVE_SEARCH = 13, SAVE_SEARCH_UPDATE = 14, PARTICIPANT_STATUS = 15,
-    LABEL_CONTACTS = 16, GROUP_CONTACTS = 20;
-
-  /**
-   * The task array
-   *
-   * @var array
-   */
-  static $_tasks = NULL;
-
-  /**
-   * The optional task array
-   *
-   * @var array
-   */
-  static $_optionalTasks = NULL;
+class CRM_Event_Task extends CRM_Core_Task {
 
   /**
    * These tasks are the core set of tasks that the user can perform
@@ -66,20 +47,20 @@ class CRM_Event_Task {
    * @return array
    *   the set of tasks for a group of contacts
    */
-  public static function &tasks() {
-    if (!(self::$_tasks)) {
+  public static function tasks() {
+    if (!self::$_tasks) {
       self::$_tasks = array(
-        1 => array(
+        self::DELETE_EVENTS => array(
           'title' => ts('Delete participants from event'),
           'class' => 'CRM_Event_Form_Task_Delete',
           'result' => FALSE,
         ),
-        2 => array(
+        self::PRINT_EVENTS => array(
           'title' => ts('Print selected rows'),
           'class' => 'CRM_Event_Form_Task_Print',
           'result' => FALSE,
         ),
-        3 => array(
+        self::EXPORT_EVENTS => array(
           'title' => ts('Export participants'),
           'class' => array(
             'CRM_Export_Form_Select',
@@ -87,7 +68,7 @@ public static function &tasks() {
           ),
           'result' => FALSE,
         ),
-        4 => array(
+        self::BATCH_EVENTS => array(
           'title' => ts('Update multiple participants'),
           'class' => array(
             'CRM_Event_Form_Task_PickProfile',
@@ -95,42 +76,42 @@ public static function &tasks() {
           ),
           'result' => TRUE,
         ),
-        5 => array(
+        self::CANCEL_REGISTRATION => array(
           'title' => ts('Cancel registration'),
           'class' => 'CRM_Event_Form_Task_Cancel',
           'result' => FALSE,
         ),
-        6 => array(
+        self::EMAIL_CONTACTS => array(
           'title' => ts('Email - send now'),
           'class' => 'CRM_Event_Form_Task_Email',
           'result' => TRUE,
         ),
-        13 => array(
+        self::SAVE_SEARCH => array(
           'title' => ts('Group - create smart group'),
           'class' => 'CRM_Event_Form_Task_SaveSearch',
           'result' => TRUE,
         ),
-        14 => array(
+        self::SAVE_SEARCH_UPDATE => array(
           'title' => ts('Group - update smart group'),
           'class' => 'CRM_Event_Form_Task_SaveSearch_Update',
           'result' => TRUE,
         ),
-        15 => array(
+        self::PARTICIPANT_STATUS => array(
           'title' => ts('Participant status - change'),
           'class' => 'CRM_Event_Form_Task_ParticipantStatus',
           'result' => TRUE,
         ),
-        16 => array(
+        self::LABEL_CONTACTS => array(
           'title' => ts('Name badges - print'),
           'class' => 'CRM_Event_Form_Task_Badge',
           'result' => FALSE,
         ),
-        17 => array(
+        self::PRINT_FOR_CONTACTS => array(
           'title' => ts('PDF letter - print for participants'),
           'class' => 'CRM_Event_Form_Task_PDF',
           'result' => TRUE,
         ),
-        20 => array(
+        self::GROUP_CONTACTS => array(
           'title' => ts('Group - add contacts'),
           'class' => 'CRM_Event_Form_Task_AddToGroup',
           'result' => FALSE,
@@ -139,61 +120,32 @@ public static function &tasks() {
 
       //CRM-4418, check for delete
       if (!CRM_Core_Permission::check('delete in CiviEvent')) {
-        unset(self::$_tasks[1]);
+        unset(self::$_tasks[self::DELETE_EVENTS]);
       }
       //CRM-12920 - check for edit permission
       if (!CRM_Core_Permission::check('edit event participants')) {
-        unset(self::$_tasks[4], self::$_tasks[5], self::$_tasks[15]);
+        unset(self::$_tasks[self::BATCH_EVENTS], self::$_tasks[self::CANCEL_REGISTRATION], self::$_tasks[self::PARTICIPANT_STATUS]);
       }
 
       CRM_Utils_Hook::searchTasks('event', self::$_tasks);
+      asort(self::$_tasks);
     }
 
     return self::$_tasks;
   }
 
   /**
-   * These tasks are the core set of task titles
-   * for participants
-   *
-   * @return array
-   *   the set of task titles
-   */
-  public static function &taskTitles() {
-    self::tasks();
-    $titles = array();
-    foreach (self::$_tasks as $id => $value) {
-      // skip Update Smart Group task
-      if ($id != self::SAVE_SEARCH_UPDATE) {
-        $titles[$id] = $value['title'];
-      }
-    }
-    return $titles;
-  }
-
-  /**
-   * These tasks get added based on the context the user is in.
-   *
-   * @return array
-   *   the set of optional tasks for a group of contacts
-   */
-  public static function &optionalTaskTitle() {
-    $tasks = array(
-      14 => self::$_tasks[14]['title'],
-    );
-    return $tasks;
-  }
-
-  /**
    * Show tasks selectively based on the permission level
    * of the user
    *
    * @param int $permission
+   * @param bool $deletedContacts
+   *   Are these tasks for operating on deleted contacts?.
    *
    * @return array
    *   set of tasks that are valid for the user
    */
-  public static function &permissionedTaskTitles($permission) {
+  public static function permissionedTaskTitles($permission, $deletedContacts = FALSE) {
     $tasks = array();
     if (($permission == CRM_Core_Permission::EDIT)
       || CRM_Core_Permission::check('edit event participants')
@@ -202,13 +154,13 @@ public static function &permissionedTaskTitles($permission) {
     }
     else {
       $tasks = array(
-        3 => self::$_tasks[3]['title'],
-        6 => self::$_tasks[6]['title'],
+        self::EXPORT_EVENTS => self::$_tasks[self::EXPORT_EVENTS]['title'],
+        self::EMAIL_CONTACTS => self::$_tasks[self::EMAIL_CONTACTS]['title'],
       );
 
       //CRM-4418,
       if (CRM_Core_Permission::check('delete in CiviEvent')) {
-        $tasks[1] = self::$_tasks[1]['title'];
+        $tasks[self::DELETE_EVENTS] = self::$_tasks[self::DELETE_EVENTS]['title'];
       }
     }
     return $tasks;
@@ -227,13 +179,9 @@ public static function getTask($value) {
     self::tasks();
     if (!$value || !CRM_Utils_Array::value($value, self::$_tasks)) {
       // make the print task by default
-      $value = 2;
+      $value = self::PRINT_EVENTS;
     }
-    asort(self::$_tasks);
-    return array(
-      self::$_tasks[$value]['class'],
-      self::$_tasks[$value]['result'],
-    );
+    return parent::getTask($value);
   }
 
 }
diff --git a/CRM/Group/Form/Search.php b/CRM/Group/Form/Search.php
index 6922d218dfb..fcbe34c5c2e 100644
--- a/CRM/Group/Form/Search.php
+++ b/CRM/Group/Form/Search.php
@@ -81,6 +81,17 @@ public function buildQuickForm() {
       NULL, NULL, NULL, NULL, '&nbsp;&nbsp;&nbsp;'
     );
 
+    $componentModes = CRM_Contact_Form_Search::getModeSelect();
+    if (count($componentModes) > 1) {
+      $this->add('select',
+        'component_mode',
+        ts('View Results As'),
+        $componentModes,
+        FALSE,
+        array('class' => 'crm-select2')
+      );
+    }
+
     $this->addButtons(array(
       array(
         'type' => 'refresh',
@@ -97,7 +108,7 @@ public function postProcess() {
     $params = $this->controller->exportValues($this->_name);
     $parent = $this->controller->getParent();
     if (!empty($params)) {
-      $fields = array('title', 'created_by', 'group_type', 'visibility', 'active_status', 'inactive_status');
+      $fields = array('title', 'created_by', 'group_type', 'visibility', 'active_status', 'inactive_status', 'component_mode');
       foreach ($fields as $field) {
         if (isset($params[$field]) &&
           !CRM_Utils_System::isNull($params[$field])
diff --git a/CRM/Group/Page/AJAX.php b/CRM/Group/Page/AJAX.php
index 9210ddbead2..077e779fc90 100644
--- a/CRM/Group/Page/AJAX.php
+++ b/CRM/Group/Page/AJAX.php
@@ -54,6 +54,7 @@ public static function getGroupList() {
         'created_by' => 'String',
         'group_type' => 'String',
         'visibility' => 'String',
+        'component_mode' => 'String',
         'status' => 'Integer',
         'parentsOnly' => 'Integer',
         'showOrgInfo' => 'Boolean',
diff --git a/CRM/Mailing/Task.php b/CRM/Mailing/Task.php
index 6bdec4b22a4..89fec648894 100644
--- a/CRM/Mailing/Task.php
+++ b/CRM/Mailing/Task.php
@@ -36,20 +36,7 @@
  * used by the search forms.
  *
  */
-class CRM_Mailing_Task {
-  /**
-   * The task array.
-   *
-   * @var array
-   */
-  static $_tasks = NULL;
-
-  /**
-   * The optional task array.
-   *
-   * @var array
-   */
-  static $_optionalTasks = NULL;
+class CRM_Mailing_Task extends CRM_Core_Task {
 
   /**
    * These tasks are the core set of tasks that the user can perform
@@ -58,10 +45,10 @@ class CRM_Mailing_Task {
    * @return array
    *   the set of tasks for a group of contacts.
    */
-  public static function &tasks() {
+  public static function tasks() {
     if (!(self::$_tasks)) {
       self::$_tasks = array(
-        1 => array(
+        self::PRINT_MAILINGS => array(
           'title' => ts('Print Mailing Recipients'),
           'class' => 'CRM_Mailing_Form_Task_Print',
           'result' => FALSE,
@@ -76,17 +63,6 @@ public static function &tasks() {
   }
 
   /**
-   * These tasks are the core set of task titles
-   * on mailing recipients.
-   *
-   * @return array
-   *   the set of task titles.
-   */
-  public static function &taskTitles() {
-    return array();
-  }
-
-  /**
    * Show tasks selectively based on the permission level
    * of the user.
    *
@@ -95,7 +71,7 @@ public static function &taskTitles() {
    * @return array
    *   set of tasks that are valid for the user
    */
-  public static function &permissionedTaskTitles($permission) {
+  public static function permissionedTaskTitles($permission, $deleteContacts = FALSE) {
     $task = array();
     return $task;
   }
@@ -113,8 +89,9 @@ public static function getTask($value) {
     self::tasks();
     if (!$value || !CRM_Utils_Array::value($value, self::$_tasks)) {
       // make the print task by default
-      $value = 1;
+      $value = self::PRINT_MAILINGS;
     }
+
     return array(
       self::$_tasks[$value]['class'],
       self::$_tasks[$value]['result'],
diff --git a/CRM/Member/Form/Task.php b/CRM/Member/Form/Task.php
index 7624334c19e..7dfa160ab53 100644
--- a/CRM/Member/Form/Task.php
+++ b/CRM/Member/Form/Task.php
@@ -95,8 +95,11 @@ public static function preProcessCommon(&$form, $useTable = FALSE) {
     $values = $form->controller->exportValues($form->get('searchFormName'));
 
     $form->_task = $values['task'];
-    $memberTasks = CRM_Member_Task::tasks();
-    $form->assign('taskName', $memberTasks[$form->_task]);
+    $tasks = CRM_Member_Task::permissionedTaskTitles(CRM_Core_Permission::getPermission());
+    if (!array_key_exists($form->_task, CRM_Member_Task::permissionedTaskTitles(CRM_Core_Permission::getPermission()))) {
+      CRM_Core_Error::statusBounce(ts('You do not have permission to access this page.'));
+    }
+    $form->assign('taskName', $tasks[$form->_task]);
 
     $ids = array();
     if ($values['radio_ts'] == 'ts_sel') {
diff --git a/CRM/Member/Task.php b/CRM/Member/Task.php
index 7f2da7b08e7..6da42c315bb 100644
--- a/CRM/Member/Task.php
+++ b/CRM/Member/Task.php
@@ -39,22 +39,7 @@
  * used by the search forms
  *
  */
-class CRM_Member_Task {
-  const DELETE_MEMBERS = 1, PRINT_MEMBERS = 2, EXPORT_MEMBERS = 3, EMAIL_CONTACTS = 4, BATCH_MEMBERS = 5;
-
-  /**
-   * The task array
-   *
-   * @var array
-   */
-  static $_tasks = NULL;
-
-  /**
-   * The optional task array
-   *
-   * @var array
-   */
-  static $_optionalTasks = NULL;
+class CRM_Member_Task extends CRM_Core_Task {
 
   /**
    * These tasks are the core set of tasks that the user can perform
@@ -63,20 +48,20 @@ class CRM_Member_Task {
    * @return array
    *   the set of tasks for a group of contacts
    */
-  public static function &tasks() {
-    if (!(self::$_tasks)) {
+  public static function tasks() {
+    if (!self::$_tasks) {
       self::$_tasks = array(
-        1 => array(
+        self::DELETE_MEMBERS => array(
           'title' => ts('Delete memberships'),
           'class' => 'CRM_Member_Form_Task_Delete',
           'result' => FALSE,
         ),
-        2 => array(
+        self::PRINT_MEMBERS => array(
           'title' => ts('Print selected rows'),
           'class' => 'CRM_Member_Form_Task_Print',
           'result' => FALSE,
         ),
-        3 => array(
+        self::EXPORT_MEMBERS => array(
           'title' => ts('Export members'),
           'class' => array(
             'CRM_Export_Form_Select',
@@ -84,12 +69,12 @@ public static function &tasks() {
           ),
           'result' => FALSE,
         ),
-        4 => array(
+        self::EMAIL_MEMBERS => array(
           'title' => ts('Email - send now'),
           'class' => 'CRM_Member_Form_Task_Email',
           'result' => TRUE,
         ),
-        5 => array(
+        self::BATCH_MEMBERS => array(
           'title' => ts('Update multiple memberships'),
           'class' => array(
             'CRM_Member_Form_Task_PickProfile',
@@ -97,27 +82,37 @@ public static function &tasks() {
           ),
           'result' => TRUE,
         ),
-        6 => array(
+        self::LABEL_MEMBERS => array(
           'title' => ts('Mailing labels - print'),
           'class' => array(
             'CRM_Member_Form_Task_Label',
           ),
           'result' => TRUE,
         ),
-        7 => array(
+        self::PRINT_FOR_MEMBERS => array(
           'title' => ts('Print/merge document for memberships'),
           'class' => 'CRM_Member_Form_Task_PDFLetter',
           'result' => FALSE,
         ),
+        self::SAVE_SEARCH => array(
+          'title' => ts('Group - create smart group'),
+          'class' => 'CRM_Contact_Form_Task_SaveSearch',
+          'result' => TRUE,
+        ),
+        self::SAVE_SEARCH_UPDATE => array(
+          'title' => ts('Group - update smart group'),
+          'class' => 'CRM_Contact_Form_Task_SaveSearch_Update',
+          'result' => TRUE,
+        ),
       );
 
       //CRM-4418, check for delete
       if (!CRM_Core_Permission::check('delete in CiviMember')) {
-        unset(self::$_tasks[1]);
+        unset(self::$_tasks[self::DELETE_MEMBERS]);
       }
       //CRM-12920 - check for edit permission
       if (!CRM_Core_Permission::check('edit memberships')) {
-        unset(self::$_tasks[5]);
+        unset(self::$_tasks[self::BATCH_MEMBERS]);
       }
 
       CRM_Utils_Hook::searchTasks('membership', self::$_tasks);
@@ -134,13 +129,8 @@ public static function &tasks() {
    * @return array
    *   the set of task titles
    */
-  public static function &taskTitles() {
-    self::tasks();
-    $titles = array();
-    foreach (self::$_tasks as $id => $value) {
-      $titles[$id] = $value['title'];
-    }
-    return $titles;
+  public static function taskTitles() {
+    return parent::taskTitles();
   }
 
   /**
@@ -148,11 +138,13 @@ public static function &taskTitles() {
    * of the user
    *
    * @param int $permission
+   * @param bool $deletedContacts
+   *   Are these tasks for operating on deleted contacts?.
    *
    * @return array
    *   set of tasks that are valid for the user
    */
-  public static function &permissionedTaskTitles($permission) {
+  public static function permissionedTaskTitles($permission, $deletedContacts = FALSE) {
     $tasks = array();
     if (($permission == CRM_Core_Permission::EDIT)
       || CRM_Core_Permission::check('edit memberships')
@@ -161,12 +153,12 @@ public static function &permissionedTaskTitles($permission) {
     }
     else {
       $tasks = array(
-        3 => self::$_tasks[3]['title'],
-        4 => self::$_tasks[4]['title'],
+        self::EXPORT_MEMBERS => self::$_tasks[self::EXPORT_MEMBERS]['title'],
+        self::EMAIL_MEMBERS => self::$_tasks[self::EMAIL_MEMBERS]['title'],
       );
       //CRM-4418,
       if (CRM_Core_Permission::check('delete in CiviMember')) {
-        $tasks[1] = self::$_tasks[1]['title'];
+        $tasks[self::DELETE_MEMBERS] = self::$_tasks[self::DELETE_MEMBERS]['title'];
       }
     }
     return $tasks;
@@ -184,13 +176,10 @@ public static function &permissionedTaskTitles($permission) {
   public static function getTask($value) {
     self::tasks();
     if (!$value || !CRM_Utils_Array::value($value, self::$_tasks)) {
-      // make the print task by default
-      $value = 2;
+      // Make the print task the default
+      $value = self::PRINT_MEMBERS;
     }
-    return array(
-      self::$_tasks[$value]['class'],
-      self::$_tasks[$value]['result'],
-    );
+    return parent::getTask($value);
   }
 
 }
diff --git a/CRM/Pledge/Task.php b/CRM/Pledge/Task.php
index feeaf107344..dab2820ac7c 100644
--- a/CRM/Pledge/Task.php
+++ b/CRM/Pledge/Task.php
@@ -34,22 +34,7 @@
  * class to represent the actions that can be performed on a group of contacts
  * used by the search forms.
  */
-class CRM_Pledge_Task {
-  const DELETE_PLEDGES = 1, PRINT_PLEDGES = 2, EXPORT_PLEDGES = 3;
-
-  /**
-   * The task array
-   *
-   * @var array
-   */
-  static $_tasks = NULL;
-
-  /**
-   * The optional task array
-   *
-   * @var array
-   */
-  static $_optionalTasks = NULL;
+class CRM_Pledge_Task extends CRM_Core_Task {
 
   /**
    * These tasks are the core set of tasks that the user can perform
@@ -58,20 +43,20 @@ class CRM_Pledge_Task {
    * @return array
    *   the set of tasks for a group of contacts
    */
-  public static function &tasks() {
+  public static function tasks() {
     if (!self::$_tasks) {
       self::$_tasks = array(
-        1 => array(
+        self::DELETE_PLEDGES => array(
           'title' => ts('Delete pledges'),
           'class' => 'CRM_Pledge_Form_Task_Delete',
           'result' => FALSE,
         ),
-        2 => array(
+        self::PRINT_PLEDGES => array(
           'title' => ts('Print selected rows'),
           'class' => 'CRM_Pledge_Form_Task_Print',
           'result' => FALSE,
         ),
-        3 => array(
+        self::EXPORT_PLEDGES => array(
           'title' => ts('Export pledges'),
           'class' => array(
             'CRM_Export_Form_Select',
@@ -83,7 +68,7 @@ public static function &tasks() {
 
       // CRM-4418, check for delete
       if (!CRM_Core_Permission::check('delete in CiviPledge')) {
-        unset(self::$_tasks[1]);
+        unset(self::$_tasks[self::DELETE_PLEDGES]);
       }
 
       CRM_Utils_Hook::searchTasks('pledge', self::$_tasks);
@@ -94,32 +79,6 @@ public static function &tasks() {
   }
 
   /**
-   * These tasks are the core set of task titles.
-   *
-   * @return array
-   *   the set of task titles
-   */
-  public static function &taskTitles() {
-    self::tasks();
-    $titles = array();
-    foreach (self::$_tasks as $id => $value) {
-      $titles[$id] = $value['title'];
-    }
-    return $titles;
-  }
-
-  /**
-   * These tasks get added based on the context the user is in.
-   *
-   * @return array
-   *   the set of optional tasks for a group of contacts
-   */
-  public static function &optionalTaskTitle() {
-    $tasks = array();
-    return $tasks;
-  }
-
-  /**
    * Show tasks selectively based on the permission level
    * of the user
    *
@@ -128,7 +87,7 @@ public static function &optionalTaskTitle() {
    * @return array
    *   set of tasks that are valid for the user
    */
-  public static function &permissionedTaskTitles($permission) {
+  public static function permissionedTaskTitles($permission, $deleteContact = FALSE) {
     $tasks = array();
     if (($permission == CRM_Core_Permission::EDIT)
       || CRM_Core_Permission::check('edit pledges')
@@ -137,11 +96,11 @@ public static function &permissionedTaskTitles($permission) {
     }
     else {
       $tasks = array(
-        3 => self::$_tasks[3]['title'],
+        self::EXPORT_PLEDGES => self::$_tasks[self::EXPORT_PLEDGES]['title'],
       );
       //CRM-4418,
       if (CRM_Core_Permission::check('delete in CiviPledge')) {
-        $tasks[1] = self::$_tasks[1]['title'];
+        $tasks[self::DELETE_PLEDGES] = self::$_tasks[self::DELETE_PLEDGES]['title'];
       }
     }
     return $tasks;
@@ -160,8 +119,9 @@ public static function getTask($value) {
     self::tasks();
     if (!$value || !CRM_Utils_Array::value($value, self::$_tasks)) {
       // make the print task by default
-      $value = 2;
+      $value = self::PRINT_PLEDGES;
     }
+
     return array(
       self::$_tasks[$value]['class'],
       self::$_tasks[$value]['result'],
diff --git a/templates/CRM/Group/Form/Search.tpl b/templates/CRM/Group/Form/Search.tpl
index 5a59dd1a908..64af53742cd 100644
--- a/templates/CRM/Group/Form/Search.tpl
+++ b/templates/CRM/Group/Form/Search.tpl
@@ -24,45 +24,57 @@
  +--------------------------------------------------------------------+
 *}
 <div class="crm-block crm-form-block crm-group-search-form-block">
-
-<h3>{ts}Find Groups{/ts}</h3>
-<table class="form-layout">
-  <tr>
-    <td>
-      {$form.title.label}<br />
-      {$form.title.html}<br />
-      <span class="description font-italic">
+  <div class="crm-accordion-wrapper crm-search_builder-accordion {if $rows and !$showSearchForm}collapsed{/if}">
+    <div class="crm-accordion-header crm-master-accordion-header">
+      {ts}Find Groups{/ts}
+    </div>
+    <div class="crm-accordion-body">
+      <div id="searchForm">
+        <table class="form-layout">
+          <tr>
+            <td>
+              {$form.title.label}<br />
+              {$form.title.html}<br />
+              <span class="description font-italic">
           {ts}Complete OR partial group name.{/ts}
       </span>
-    </td>
-    <td>
-      {$form.created_by.label}<br />
-      {$form.created_by.html}<br />
-      <span class="description font-italic">
+            </td>
+            <td>
+              {$form.created_by.label}<br />
+              {$form.created_by.html}<br />
+              <span class="description font-italic">
           {ts}Complete OR partial creator name.{/ts}
       </span>
-    </td>
-    <td id="group_type-block">
-      {$form.group_type_search.label}<br />
-      {$form.group_type_search.html}<br />
-      <span class="description font-italic">
-          {ts}Filter search by group type(s).{/ts}
-      </span>
-    </td>
-    <td>
-      {$form.visibility.label}<br />
-      {$form.visibility.html}<br />
-      <span class="description font-italic">
+            </td>
+            <td>
+              {$form.visibility.label}<br />
+              {$form.visibility.html}<br />
+              <span class="description font-italic">
           {ts}Filter search by visibility.{/ts}
       </span>
-    </td>
-    <td>
-      {$form.group_status.label}<br />
-      {$form.group_status.html}
-    </td>
-  </tr>
-</table>
-</div>
+            </td>
+          </tr>
+          <tr>
+            <td id="group_type-block">
+              {$form.group_type_search.label}<br />
+              {$form.group_type_search.html}<br />
+              <span class="description font-italic">
+          {ts}Filter search by group type(s).{/ts}
+      </span>
+            </td>
+            <td>
+              {$form.group_status.label}<br />
+              {$form.group_status.html}
+            </td>
+            <td>
+              {$form.component_mode.label}<br />
+              {$form.component_mode.html}
+            </td>
+          </tr>
+        </table>
+      </div>
+    </div>
+  </div>
 <div class="css_right">
   <a class="crm-hover-button action-item" href="{crmURL q="reset=1&update_smart_groups=1"}">{ts}Update Smart Group Counts{/ts}</a> {help id="update_smart_groups"}
 </div>
@@ -119,6 +131,7 @@
           d.group_type = groupTypes,
           d.visibility = $(".crm-group-search-form-block select#visibility").val(),
           d.status = groupStatus,
+          d.component_mode = $(".crm-group-search-form-block select#component_mode").val(),
           d.showOrgInfo = {/literal}"{$showOrgInfo}"{literal},
           d.parentsOnly = parentsOnly
         }
