diff --git a/CRM/Admin/Form/Setting/Smtp.php b/CRM/Admin/Form/Setting/Smtp.php
index 84c87282879..e3219e81ff3 100644
--- a/CRM/Admin/Form/Setting/Smtp.php
+++ b/CRM/Admin/Form/Setting/Smtp.php
@@ -52,6 +52,7 @@ public function buildQuickForm() {
     $this->addRadio('outBound_option', ts('Select Mailer'), $outBoundOption);
 
     CRM_Utils_System::setTitle(ts('Settings - Outbound Mail'));
+    $this->add('checkbox', 'allow_mail_from_logged_in_contact', ts('Allow Mail to be sent from logged in contact\'s email address'));
     $this->add('text', 'sendmail_path', ts('Sendmail Path'));
     $this->add('text', 'sendmail_args', ts('Sendmail Argument'));
     $this->add('text', 'smtpServer', ts('SMTP Server'));
@@ -79,6 +80,14 @@ public function postProcess() {
 
     $formValues = $this->controller->exportValues($this->_name);
 
+    if (!empty($formValues['allow_mail_from_logged_in_contact'])) {
+      Civi::settings()->set('allow_mail_from_logged_in_contact', TRUE);
+    }
+    else {
+      Civi::settings()->set('allow_mail_from_logged_in_contact', FALSE);
+    }
+    unset($formValues['allow_mail_from_logged_in_contact']);
+
     $buttonName = $this->controller->getButtonName();
     // check if test button
     if ($buttonName == $this->_testButtonName) {
@@ -238,6 +247,8 @@ public function setDefaultValues() {
     if (!$this->_defaults) {
       $this->_defaults = array();
 
+      $this->_defaults['allow_mail_from_logged_in_contact'] = Civi::settings()->get('allow_mail_from_logged_in_contact');
+
       $mailingBackend = Civi::settings()->get('mailing_backend');
       if (!empty($mailingBackend)) {
         $this->_defaults = $mailingBackend;
diff --git a/CRM/Contact/BAO/Contact/Location.php b/CRM/Contact/BAO/Contact/Location.php
index 7405537b444..8f5ace68fb0 100644
--- a/CRM/Contact/BAO/Contact/Location.php
+++ b/CRM/Contact/BAO/Contact/Location.php
@@ -45,29 +45,17 @@ class CRM_Contact_BAO_Contact_Location {
    *   Array of display_name, email, location type and location id if found, or (null,null,null, null)
    */
   public static function getEmailDetails($id, $isPrimary = TRUE, $locationTypeID = NULL) {
-    $primaryClause = NULL;
-    if ($isPrimary) {
-      $primaryClause = " AND civicrm_email.is_primary = 1";
-    }
-
-    $locationClause = NULL;
-    if ($locationTypeID) {
-      $locationClause = " AND civicrm_email.location_type_id = $locationTypeID";
-    }
-
-    $sql = "
-SELECT    civicrm_contact.display_name,
-          civicrm_email.email,
-          civicrm_email.location_type_id,
-          civicrm_email.id
-FROM      civicrm_contact
-LEFT JOIN civicrm_email ON ( civicrm_contact.id = civicrm_email.contact_id {$primaryClause} {$locationClause} )
-WHERE     civicrm_contact.id = %1";
-
-    $params = array(1 => array($id, 'Integer'));
-    $dao = CRM_Core_DAO::executeQuery($sql, $params);
-    if ($dao->fetch()) {
-      return array($dao->display_name, $dao->email, $dao->location_type_id, $dao->id);
+    $emails = civicrm_api3('Email', 'get', array(
+      'is_primary' => $isPrimary,
+      'location_type_id' => $locationTypeID,
+      'contact_id' => $id,
+      'options' => array('limit' => 1),
+      'return' => array('contact_id.display_name', 'email', 'location_type_id', 'id'),
+    ));
+
+    if ($emails['count'] > 0) {
+      $email = reset($emails['values']);
+      return array($email['contact_id.display_name'], $email['email'], $email['location_type_id'], $email['id']);
     }
     return array(NULL, NULL, NULL, NULL);
   }
diff --git a/CRM/Contact/Form/Domain.php b/CRM/Contact/Form/Domain.php
index c041cef4c69..cd3d2ec7f96 100644
--- a/CRM/Contact/Form/Domain.php
+++ b/CRM/Contact/Form/Domain.php
@@ -118,19 +118,6 @@ public function setDefaultValues() {
       $params['id'] = $this->_id;
       CRM_Core_BAO_Domain::retrieve($params, $domainDefaults);
       $this->_contactId = $domainDefaults['contact_id'];
-      //get the default domain from email address. fix CRM-3552
-      $optionValues = array();
-      $grpParams['name'] = 'from_email_address';
-      CRM_Core_OptionValue::getValues($grpParams, $optionValues);
-      foreach ($optionValues as $Id => $value) {
-        if ($value['is_default'] && $value['is_active']) {
-          $this->_fromEmailId = $Id;
-          $list = explode('"', $value['label']);
-          $domainDefaults['email_name'] = CRM_Utils_Array::value(1, $list);
-          $domainDefaults['email_address'] = CRM_Utils_Mail::pluckEmailFromHeader($value['label']);
-          break;
-        }
-      }
 
       unset($params['id']);
       $locParams = array('contact_id' => $domainDefaults['contact_id']);
@@ -156,9 +143,6 @@ public function setDefaultValues() {
   public function buildQuickForm() {
     $this->addField('name', array('label' => ts('Organization Name')), TRUE);
     $this->addField('description', array('label' => ts('Description'), 'size' => 30));
-    $this->add('text', 'email_name', ts('FROM Name'), CRM_Core_DAO::getAttribute('CRM_Core_DAO_Email', 'email'), TRUE);
-    $this->add('text', 'email_address', ts('FROM Email Address'), CRM_Core_DAO::getAttribute('CRM_Core_DAO_Email', 'email'), TRUE);
-    $this->addRule('email_address', ts('Domain Email Address must use a valid email address format (e.g. \'info@example.org\').'), 'email');
 
     //build location blocks.
     CRM_Contact_Form_Location::buildQuickForm($this);
@@ -207,16 +191,6 @@ public static function formRule($fields) {
       $errors = array();
     }
 
-    //fix for CRM-3552,
-    //as we use "fromName"<emailaddresss> format for domain email.
-    if (strpos($fields['email_name'], '"') !== FALSE) {
-      $errors['email_name'] = ts('Double quotes are not allow in from name.');
-    }
-
-    // Check for default from email address and organization (domain) name. Force them to change it.
-    if ($fields['email_address'] == 'info@EXAMPLE.ORG') {
-      $errors['email_address'] = ts('Please enter a valid default FROM email address for system-generated emails.');
-    }
     if ($fields['name'] == 'Default Domain Name') {
       $errors['name'] = ts('Please enter the name of the organization or entity which owns this CiviCRM site.');
     }
@@ -275,36 +249,6 @@ public function postProcess() {
 
     CRM_Core_BAO_Domain::edit($params, $this->_id);
 
-    //set domain from email address, CRM-3552
-    $emailName = '"' . $params['email_name'] . '" <' . $params['email_address'] . '>';
-
-    $emailParams = array(
-      'label' => $emailName,
-      'description' => $params['description'],
-      'is_active' => 1,
-      'is_default' => 1,
-    );
-
-    $groupParams = array('name' => 'from_email_address');
-
-    //get the option value wt.
-    if ($this->_fromEmailId) {
-      $action = $this->_action;
-      $emailParams['weight'] = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_OptionValue', $this->_fromEmailId, 'weight');
-    }
-    else {
-      //add from email address.
-      $action = CRM_Core_Action::ADD;
-      $grpId = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_OptionGroup', 'from_email_address', 'id', 'name');
-      $fieldValues = array('option_group_id' => $grpId);
-      $emailParams['weight'] = CRM_Utils_Weight::getDefaultWeight('CRM_Core_DAO_OptionValue', $fieldValues);
-    }
-
-    //reset default within domain.
-    $emailParams['reset_default_for'] = array('domain_id' => CRM_Core_Config::domainID());
-
-    CRM_Core_OptionValue::addOptionValue($emailParams, $groupParams, $action, $this->_fromEmailId);
-
     CRM_Core_Session::setStatus(ts("Domain information for '%1' has been saved.", array(1 => $domain->name)), ts('Saved'), 'success');
     $session = CRM_Core_Session::singleton();
     $session->replaceUserContext(CRM_Utils_System::url('civicrm/admin', 'reset=1'));
diff --git a/CRM/Contact/Form/Task/EmailCommon.php b/CRM/Contact/Form/Task/EmailCommon.php
index 88be4a082bd..e57efd9d01f 100644
--- a/CRM/Contact/Form/Task/EmailCommon.php
+++ b/CRM/Contact/Form/Task/EmailCommon.php
@@ -44,21 +44,16 @@ class CRM_Contact_Form_Task_EmailCommon {
   public $_toContactEmails = array();
 
   /**
-   * Generate an array of Domain email addresses.
+   * @deprecated Generate an array of Domain email addresses.
    * @return array $domainEmails;
    */
   public static function domainEmails() {
-    $domainEmails = array();
-    $domainFrom = CRM_Core_OptionGroup::values('from_email_address');
-    foreach (array_keys($domainFrom) as $k) {
-      $domainEmail = $domainFrom[$k];
-      $domainEmails[$domainEmail] = htmlspecialchars($domainEmail);
-    }
-    return $domainEmails;
+    Civi::log()->warning('Deprecated function, use CRM_Core_BAO_Email::domainEmails()', array('civi.tag' => 'deprecated'));
+    return CRM_Core_BAO_Email::domainEmails();
   }
 
   /**
-   * Pre Process Form Addresses to be used in QUickfomr
+   * Pre Process Form Addresses to be used in Quickform
    * @param CRM_Core_Form $form
    * @param bool $bounce determine if we want to throw a status bounce.
    */
@@ -72,60 +67,27 @@ public static function preProcessFromAddress(&$form, $bounce = TRUE) {
       $form->_single = TRUE;
     }
 
-    $form->_emails = $emails = array();
+    $form->_emails = array();
 
     $contactID = CRM_Core_Session::singleton()->getLoggedInContactID();
-    $fromDisplayName  = CRM_Core_Session::singleton()->getLoggedInContactDisplayName();
-
     $form->_contactIds = array($contactID);
-    $contactEmails = CRM_Core_BAO_Email::allEmails($contactID);
 
-    $form->_onHold = array();
+    $fromEmailValues = CRM_Core_BAO_Email::getFromEmail();
 
-    foreach ($contactEmails as $emailId => $item) {
-      $email = $item['email'];
-      if (!$email && (count($emails) < 1)) {
-        // set it if no emails are present at all
-        $form->_noEmails = TRUE;
-      }
-      else {
-        if ($email) {
-          if (in_array($email, $emails)) {
-            // CRM-3624
-            continue;
-          }
-
-          $emails[$emailId] = '"' . $fromDisplayName . '" <' . $email . '> ';
-          $form->_onHold[$emailId] = $item['on_hold'];
-          $form->_noEmails = FALSE;
-        }
-      }
-      if (!empty($email)) {
-        $form->_emails[$emailId] = $emails[$emailId];
-        $emails[$emailId] .= $item['locationType'];
-
-        if ($item['is_primary']) {
-          $emails[$emailId] .= ' ' . ts('(preferred)');
-        }
-        $emails[$emailId] = htmlspecialchars($emails[$emailId]);
-      }
+    $form->_noEmails = FALSE;
+    if (empty($fromEmailValues)) {
+      $form->_noEmails = TRUE;
     }
-
     $form->assign('noEmails', $form->_noEmails);
 
     if ($bounce) {
       if ($form->_noEmails) {
-        CRM_Core_Error::statusBounce(ts('Your user record does not have a valid email address'));
+        CRM_Core_Error::statusBounce(ts('Your user record does not have a valid email address and no from addresses have been configured.'));
       }
     }
 
-    // now add domain from addresses
-    $domainEmails = self::domainEmails();
-    foreach ($domainEmails as $domainEmail => $email) {
-      $form->_emails[$domainEmail] = $domainEmail;
-    }
-    $form->_fromEmails = CRM_Utils_Array::crmArrayMerge($emails, $domainEmails);
-    $form->_fromEmails = array_filter($form->_fromEmails);
+    $form->_emails = $fromEmailValues;
+    $form->_fromEmails = $fromEmailValues;
     if (is_numeric(key($form->_fromEmails))) {
       // Add signature
       $defaultEmail = civicrm_api3('email', 'getsingle', array('id' => key($form->_fromEmails)));
@@ -287,7 +249,7 @@ public static function buildQuickForm(&$form) {
 
     $form->add('text', 'subject', ts('Subject'), 'size=50 maxlength=254', TRUE);
 
-    $form->add('select', 'fromEmailAddress', ts('From'), $form->_fromEmails, TRUE, array('class' => 'crm-select2 huge'));
+    $form->add('select', 'from_email_address', ts('From'), $form->_fromEmails, TRUE);
 
     CRM_Mailing_BAO_Mailing::commonCompose($form);
 
@@ -427,7 +389,7 @@ public static function postProcess(&$form) {
   public static function submit(&$form, $formValues) {
     self::saveMessageTemplate($formValues);
 
-    $from = CRM_Utils_Array::value($formValues['fromEmailAddress'], $form->_emails);
+    $from = CRM_Utils_Array::value('from_email_address', $formValues);
     $subject = $formValues['subject'];
 
     // CRM-13378: Append CC and BCC information at the end of Activity Details and format cc and bcc fields
diff --git a/CRM/Contact/Form/Task/PDFLetterCommon.php b/CRM/Contact/Form/Task/PDFLetterCommon.php
index 71df969cb3f..0b5124c9088 100644
--- a/CRM/Contact/Form/Task/PDFLetterCommon.php
+++ b/CRM/Contact/Form/Task/PDFLetterCommon.php
@@ -58,6 +58,7 @@ public static function getLoggingOptions() {
    * @param CRM_Core_Form $form
    */
   public static function preProcess(&$form) {
+    CRM_Contact_Form_Task_EmailCommon::preProcessFromAddress($form);
     $messageText = array();
     $messageSubject = array();
     $dao = new CRM_Core_BAO_MessageTemplate();
@@ -102,6 +103,8 @@ public static function buildQuickForm(&$form) {
       FALSE
     );
 
+    $form->add('select', 'from_email_address', ts('From Email Address'), $form->_fromEmails, TRUE);
+
     $form->add('static', 'pdf_format_header', NULL, ts('Page Format: %1', array(1 => '<span class="pdf-format-header-label"></span>')));
     $form->addSelect('format_id', array(
       'label' => ts('Select Format'),
diff --git a/CRM/Contribute/Form/Contribution.php b/CRM/Contribute/Form/Contribution.php
index 5b4c153daac..701961b77c8 100644
--- a/CRM/Contribute/Form/Contribution.php
+++ b/CRM/Contribute/Form/Contribution.php
@@ -1697,7 +1697,7 @@ protected function submit($submittedValues, $action, $pledgePaymentID) {
         $formValues += CRM_Contribute_BAO_ContributionSoft::getSoftContribution($contribution->id);
 
         // to get 'from email id' for send receipt
-        $this->fromEmailId = $formValues['from_email_address'];
+        $this->fromEmailId = CRM_Utils_Array::value('from_email_address', $formValues);
         if (CRM_Contribute_Form_AdditionalInfo::emailReceipt($this, $formValues)) {
           $this->statusMessage[] = ts('A receipt has been emailed to the contributor.');
         }
diff --git a/CRM/Contribute/Form/Task/Invoice.php b/CRM/Contribute/Form/Task/Invoice.php
index 59e86e00156..b817c4a9a79 100644
--- a/CRM/Contribute/Form/Task/Invoice.php
+++ b/CRM/Contribute/Form/Task/Invoice.php
@@ -129,6 +129,7 @@ public function preProcess() {
     $this->_selectedOutput = CRM_Utils_Request::retrieve('select', 'String', $this);
     $this->assign('selectedOutput', $this->_selectedOutput);
 
+    CRM_Contact_Form_Task_EmailCommon::preProcessFromAddress($this);
     if ($this->_selectedOutput == 'email') {
       CRM_Utils_System::setTitle(ts('Email Invoice'));
     }
@@ -141,36 +142,12 @@ public function preProcess() {
    * Build the form object.
    */
   public function buildQuickForm() {
-    $session = CRM_Core_Session::singleton();
     $this->preventAjaxSubmit();
     if (CRM_Core_Permission::check('administer CiviCRM')) {
       $this->assign('isAdmin', 1);
     }
-    $contactID = $session->get('userID');
-    $contactEmails = CRM_Core_BAO_Email::allEmails($contactID);
-    $emails = array();
-    $fromDisplayName = CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact',
-      $contactID, 'display_name'
-    );
-    foreach ($contactEmails as $emailId => $item) {
-      $email = $item['email'];
-      if ($email) {
-        $emails[$emailId] = '"' . $fromDisplayName . '" <' . $email . '> ';
-      }
-      if (isset($emails[$emailId])) {
-        $emails[$emailId] .= $item['locationType'];
-        if ($item['is_primary']) {
-          $emails[$emailId] .= ' ' . ts('(preferred)');
-        }
-        $emails[$emailId] = htmlspecialchars($emails[$emailId]);
-      }
-    }
-    $fromEmailAddress = CRM_Core_OptionGroup::values('from_email_address');
-    foreach ($fromEmailAddress as $key => $email) {
-      $fromEmailAddress[$key] = htmlspecialchars($fromEmailAddress[$key]);
-    }
-    $fromEmail = CRM_Utils_Array::crmArrayMerge($emails, $fromEmailAddress);
-    $this->add('select', 'from_email_address', ts('From Email Address'), array('' => '- select -') + $fromEmail);
+
+    $this->add('select', 'from_email_address', ts('From'), $this->_fromEmails, TRUE);
     if ($this->_selectedOutput != 'email') {
       $this->addElement('radio', 'output', NULL, ts('Email Invoice'), 'email_invoice');
       $this->addElement('radio', 'output', NULL, ts('PDF Invoice'), 'pdf_invoice');
@@ -477,30 +454,8 @@ public static function printPDF($contribIDs, &$params, $contactIds) {
         'tplParams' => $tplParams,
         'PDFFilename' => $pdfFileName,
       );
-      $session = CRM_Core_Session::singleton();
-      $contactID = $session->get('userID');
-      //CRM-16319 - we dont store in userID in case the user is doing multiple
-      //transactions etc
-      if (empty($contactID)) {
-        $contactID = $session->get('transaction.userID');
-      }
-      // Fix Invoice email doesnot send out when completed payment using Paypal
-      if (empty($contactID)) {
-        $contactID = current($contactIds);
-      }
-      $contactEmails = CRM_Core_BAO_Email::allEmails($contactID);
-      $emails = array();
-      $fromDisplayName = CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact',
-        $contactID, 'display_name'
-      );
 
-      foreach ($contactEmails as $emailId => $item) {
-        $email = $item['email'];
-        if ($email) {
-          $emails[$emailId] = '"' . $fromDisplayName . '" <' . $email . '> ';
-        }
-      }
-      $fromEmail = CRM_Utils_Array::crmArrayMerge($emails, CRM_Core_OptionGroup::values('from_email_address'));
+      $fromEmail = CRM_Core_BAO_Email::getFromEmail();
 
       // from email address
       if (isset($params['from_email_address'])) {
diff --git a/CRM/Contribute/Form/Task/PDF.php b/CRM/Contribute/Form/Task/PDF.php
index 2455d38fdec..d3572b21efd 100644
--- a/CRM/Contribute/Form/Task/PDF.php
+++ b/CRM/Contribute/Form/Task/PDF.php
@@ -119,7 +119,7 @@ public function buildQuickForm() {
     $this->add('checkbox', 'receipt_update', ts('Update receipt dates for these contributions'), FALSE);
     $this->add('checkbox', 'override_privacy', ts('Override privacy setting? (Do not email / Do not mail)'), FALSE);
 
-    $this->add('select', 'fromEmailAddress', ts('From Email'), $this->_fromEmails, FALSE, array('class' => 'crm-select2 huge'));
+    $this->add('select', 'from_email_address', ts('From Email'), $this->_fromEmails, FALSE);
 
     $this->addButtons(array(
         array(
@@ -197,11 +197,9 @@ public function postProcess() {
       $objects['contribution']->receive_date = CRM_Utils_Date::isoToMysql($objects['contribution']->receive_date);
 
       $values = array();
-      if (isset($params['fromEmailAddress']) && !$elements['createPdf']) {
+      if (isset($params['from_email_address']) && !$elements['createPdf']) {
         // CRM-19129 Allow useres the choice of From Email to send the receipt from.
-        $fromEmail = $params['fromEmailAddress'];
-        $from = CRM_Utils_Array::value($fromEmail, $this->_emails);
-        $fromDetails = explode(' <', $from);
+        $fromDetails = explode(' <', $params['from_email_address']);
         $input['receipt_from_email'] = substr(trim($fromDetails[1]), 0, -1);
         $input['receipt_from_name'] = str_replace('"', '', $fromDetails[0]);
       }
diff --git a/CRM/Contribute/Form/Task/PDFLetterCommon.php b/CRM/Contribute/Form/Task/PDFLetterCommon.php
index 87bb38225b2..17ce43a4974 100644
--- a/CRM/Contribute/Form/Task/PDFLetterCommon.php
+++ b/CRM/Contribute/Form/Task/PDFLetterCommon.php
@@ -23,6 +23,7 @@ public static function postProcess(&$form, $formValues = NULL) {
       $returnProperties['email'] = $returnProperties['on_hold'] = $returnProperties['is_deceased'] = $returnProperties['do_not_email'] = 1;
       $emailParams = array(
         'subject' => $formValues['subject'],
+        'from' => $formValues['from_email_address'],
       );
       // We need display_name for emailLetter() so add to returnProperties here
       $returnProperties['display_name'] = 1;
@@ -372,6 +373,9 @@ public static function emailLetter($contact, $html, $is_pdf, $format = array(),
         $emails = array_keys($emails);
         $defaults['from'] = array_pop($emails);
       }
+      else {
+        $defaults['from'] = $params['from'];
+      }
       if (!empty($params['subject'])) {
         $defaults['subject'] = $params['subject'];
       }
diff --git a/CRM/Core/BAO/Domain.php b/CRM/Core/BAO/Domain.php
index 5c519baf1f1..8804e21cc48 100644
--- a/CRM/Core/BAO/Domain.php
+++ b/CRM/Core/BAO/Domain.php
@@ -169,9 +169,13 @@ public static function multipleDomains() {
    *   name & email for domain
    * @throws Exception
    */
-  public static function getNameAndEmail($skipFatal = FALSE) {
-    $fromEmailAddress = CRM_Core_OptionGroup::values('from_email_address', NULL, NULL, NULL, ' AND is_default = 1');
+  public static function getNameAndEmail($skipFatal = FALSE, $returnString = FALSE) {
+    $fromEmailAddress = CRM_Core_BAO_Domain::getNameAndEmail(TRUE, TRUE);
     if (!empty($fromEmailAddress)) {
+      if ($returnString) {
+        // Return a string like: "Demonstrators Anonymous" <info@example.org>
+        return $fromEmailAddress;
+      }
       foreach ($fromEmailAddress as $key => $value) {
         $email = CRM_Utils_Mail::pluckEmailFromHeader($value);
         $fromArray = explode('"', $value);
@@ -180,15 +184,15 @@ public static function getNameAndEmail($skipFatal = FALSE) {
       }
       return array($fromName, $email);
     }
-    elseif ($skipFatal) {
-      return array('', '');
-    }
 
-    $url = CRM_Utils_System::url('civicrm/admin/domain',
-      'action=update&reset=1'
+    $url = CRM_Utils_System::url('civicrm/admin/options/from_email_address',
+      'reset=1'
     );
     $status = ts("There is no valid default from email address configured for the domain. You can configure here <a href='%1'>Configure From Email Address.</a>", array(1 => $url));
 
+    if ($skipFatal) {
+      CRM_Core_Error::statusBounce($status);
+    }
     CRM_Core_Error::fatal($status);
   }
 
diff --git a/CRM/Core/BAO/Email.php b/CRM/Core/BAO/Email.php
index 3bfee2724e8..3c790ac99f7 100644
--- a/CRM/Core/BAO/Email.php
+++ b/CRM/Core/BAO/Email.php
@@ -276,6 +276,20 @@ public static function holdEmail(&$email) {
   }
 
   /**
+   * Generate an array of Domain email addresses.
+   * @return array $domainEmails;
+   */
+  public static function domainEmails() {
+    $domainEmails = array();
+    $domainFrom = CRM_Core_OptionGroup::values('from_email_address');
+    foreach (array_keys($domainFrom) as $k) {
+      $domainEmail = $domainFrom[$k];
+      $domainEmails[$domainEmail] = htmlspecialchars($domainEmail);
+    }
+    return $domainEmails;
+  }
+
+  /**
    * Build From Email as the combination of all the email ids of the logged in user and
    * the domain email id
    *
@@ -283,22 +297,20 @@ public static function holdEmail(&$email) {
    *   an array of email ids
    */
   public static function getFromEmail() {
-    $contactID = CRM_Core_Session::singleton()->getLoggedInContactID();
-    $fromEmailValues = array();
-
     // add all configured FROM email addresses
-    $domainFrom = CRM_Core_OptionGroup::values('from_email_address');
-    foreach (array_keys($domainFrom) as $k) {
-      $domainEmail = $domainFrom[$k];
-      $fromEmailValues[$domainEmail] = htmlspecialchars($domainEmail);
+    $fromEmailValues = self::domainEmails();
+
+    if (!Civi::settings()->get('allow_mail_from_logged_in_contact')) {
+      return $fromEmailValues;
     }
 
     // add logged in user's active email ids
+    $contactID = CRM_Core_Session::singleton()->getLoggedInContactID();
     if ($contactID) {
       $contactEmails = self::allEmails($contactID);
-      $fromDisplayName = CRM_Core_DAO::getFieldValue('CRM_Contact_DAO_Contact', $contactID, 'display_name');
+      $fromDisplayName  = CRM_Core_Session::singleton()->getLoggedInContactDisplayName();
 
-      foreach ($contactEmails as $emailVal) {
+      foreach ($contactEmails as $emailId => $emailVal) {
         $email = trim($emailVal['email']);
         if (!$email || $emailVal['on_hold']) {
           continue;
@@ -309,7 +321,7 @@ public static function getFromEmail() {
         if (!empty($emailVal['is_primary'])) {
           $fromEmailHtml .= ' ' . ts('(preferred)');
         }
-        $fromEmailValues[$fromEmail] = $fromEmailHtml;
+        $fromEmailValues[$emailId] = $fromEmailHtml;
       }
     }
     return $fromEmailValues;
diff --git a/CRM/Event/Cart/Form/Checkout/Payment.php b/CRM/Event/Cart/Form/Checkout/Payment.php
index 59f843ad461..51f9126b9da 100644
--- a/CRM/Event/Cart/Form/Checkout/Payment.php
+++ b/CRM/Event/Cart/Form/Checkout/Payment.php
@@ -329,16 +329,6 @@ public function add_line_item($event_in_cart, $class = NULL) {
   }
 
   /**
-   * Get default from address.
-   *
-   * @return mixed
-   */
-  public function getDefaultFrom() {
-    $values = CRM_Core_OptionGroup::values('from_email_address');
-    return $values[1];
-  }
-
-  /**
    * Send email receipt.
    *
    * @param array $events_in_cart
@@ -362,7 +352,7 @@ public function emailReceipt($events_in_cart, $params) {
     $send_template_params = array(
       'table' => 'civicrm_msg_template',
       'contactId' => $this->payer_contact_id,
-      'from' => $this->getDefaultFrom(),
+      'from' => CRM_Core_BAO_Domain::getNameAndEmail(TRUE, TRUE),
       'groupName' => 'msg_tpl_workflow_event',
       'isTest' => FALSE,
       'toEmail' => $contact_details[1],
diff --git a/CRM/Mailing/BAO/Mailing.php b/CRM/Mailing/BAO/Mailing.php
index 766da13306e..42e738a502b 100644
--- a/CRM/Mailing/BAO/Mailing.php
+++ b/CRM/Mailing/BAO/Mailing.php
@@ -1708,7 +1708,7 @@ public static function create(&$params, $ids = array()) {
 
       // Get the default from email address, if not provided.
       if (empty($defaults['from_email'])) {
-        $defaultAddress = CRM_Core_OptionGroup::values('from_email_address', NULL, NULL, NULL, ' AND is_default = 1');
+        $defaultAddress = CRM_Core_BAO_Domain::getNameAndEmail(TRUE, TRUE);
         foreach ($defaultAddress as $id => $value) {
           if (preg_match('/"(.*)" <(.*)>/', $value, $match)) {
             $defaults['from_email'] = $match[2];
diff --git a/CRM/Member/Form/Membership.php b/CRM/Member/Form/Membership.php
index e6f5c984ee6..23117a3a738 100644
--- a/CRM/Member/Form/Membership.php
+++ b/CRM/Member/Form/Membership.php
@@ -936,7 +936,7 @@ public function postProcess() {
    */
   public static function emailReceipt(&$form, &$formValues, &$membership) {
     // retrieve 'from email id' for acknowledgement
-    $receiptFrom = $formValues['from_email_address'];
+    $receiptFrom = CRM_Utils_Array::value('from_email_address', $formValues);
 
     if (!empty($formValues['payment_instrument_id'])) {
       $paymentInstrument = CRM_Contribute_PseudoConstant::paymentInstrument();
diff --git a/api/v3/Mailing.php b/api/v3/Mailing.php
index a8ee98d5f86..11860b7a20f 100644
--- a/api/v3/Mailing.php
+++ b/api/v3/Mailing.php
@@ -151,7 +151,7 @@ function _civicrm_api3_mailing_create_spec(&$params) {
   $params['resubscribe_id']['api.default'] = CRM_Mailing_PseudoConstant::defaultComponent('Resubscribe', '');
   $params['unsubscribe_id']['api.default'] = CRM_Mailing_PseudoConstant::defaultComponent('Unsubscribe', '');
   $params['mailing_type']['api.default'] = 'standalone';
-  $defaultAddress = CRM_Core_OptionGroup::values('from_email_address', NULL, NULL, NULL, ' AND is_default = 1');
+  $defaultAddress = CRM_Core_BAO_Domain::getNameAndEmail(TRUE, TRUE);
   foreach ($defaultAddress as $value) {
     if (preg_match('/"(.*)" <(.*)>/', $value, $match)) {
       $params['from_email']['api.default'] = $match[2];
diff --git a/settings/Mailing.setting.php b/settings/Mailing.setting.php
index 1969df133ae..3d2e2c6d928 100644
--- a/settings/Mailing.setting.php
+++ b/settings/Mailing.setting.php
@@ -333,4 +333,17 @@
     'description' => 'The number of emails sendable via simple mail. Make sure you understand the implications for your spam reputation and legal requirements for bulk emails before editing. As there is some risk both to your spam reputation and the products if this is misused it is a hidden setting',
     'help_text' => 'CiviCRM forces users sending more than this number of mails to use CiviMails. CiviMails have additional precautions: not sending to contacts who do not want bulk mail, adding domain name and opt out links. You should familiarise yourself with the law relevant to you on bulk mailings if changing this setting. For the US https://en.wikipedia.org/wiki/CAN-SPAM_Act_of_2003 is a good place to start.',
   ),
+  'allow_mail_from_logged_in_contact' => array(
+    'group_name' => 'Mailing Preferences',
+    'group' => 'mailing',
+    'name' => 'allow_mail_from_logged_in_contact',
+    'type' => 'Boolean',
+    'quick_form_type' => 'YesNo',
+    'default' => 1,
+    'title' => 'Allow mail from logged in contact',
+    'is_domain' => 1,
+    'is_contact' => 0,
+    'description' => 'Allow sending email from the logged in contact\'s email address',
+    'help_text' => 'CiviCRM allows you to send email from the domain from email addresses and the logged in contact id addresses by default. Disable this if you only want to allow the domain from addresses to be used.',
+  ),
 );
diff --git a/templates/CRM/Admin/Form/Setting/Smtp.tpl b/templates/CRM/Admin/Form/Setting/Smtp.tpl
index aac17900787..672b6789f3c 100644
--- a/templates/CRM/Admin/Form/Setting/Smtp.tpl
+++ b/templates/CRM/Admin/Form/Setting/Smtp.tpl
@@ -31,6 +31,10 @@
 
 </div>
      <table class="form-layout-compressed">
+       <tr class="crm-smtp-form-block-allow_mail_from_logged_in_contact">
+         <td class="label">{$form.allow_mail_from_logged_in_contact.html}</td>
+         <td>{$form.allow_mail_from_logged_in_contact.label}</td>
+       </tr>
            <tr class="crm-smtp-form-block-outBound_option">
               <td class="label">{$form.outBound_option.label}</td>
               <td>{$form.outBound_option.html}</td>
diff --git a/templates/CRM/Contact/Form/Domain.hlp b/templates/CRM/Contact/Form/Domain.hlp
index 0723bf14174..0a41cc92325 100644
--- a/templates/CRM/Contact/Form/Domain.hlp
+++ b/templates/CRM/Contact/Form/Domain.hlp
@@ -30,21 +30,6 @@
 {ts 1='&#123;domain.name&#125;'}Enter the name of the organization or entity which owns this CiviCRM domain. Use the %1 token to include this value in mailing content. It is used in the default Opt-out Message.{/ts}
 {/htxt}
 
-
-{htxt id="from-name-title"}
-{ts}From Name{/ts}
-{/htxt}
-{htxt id="from-name"}
-{ts}The FROM Name and Email Address are used when automated emails are sent from this domain (e.g. subscribe and unsubscribe confirmations...). This Name and Email Address are also used as the default 'sender' values when you create a new CiviMail Mailing.{/ts}
-{/htxt}
-
-{htxt id="from-email-title"}
-{ts}From Address{/ts}
-{/htxt}
-{htxt id="from-email"}
-{ts}The FROM Name and Email Address are used when automated emails are sent from this domain (e.g. subscribe and unsubscribe confirmations...). This Name and Email Address are also used as the default 'sender' values when you create a new CiviMail Mailing.{/ts}
-{/htxt}
-
 {htxt id="return-path-title"}
 {ts}Return Path{/ts}
 {/htxt}
diff --git a/templates/CRM/Contact/Form/Domain.tpl b/templates/CRM/Contact/Form/Domain.tpl
index f5619a81455..81affcc9d38 100644
--- a/templates/CRM/Contact/Form/Domain.tpl
+++ b/templates/CRM/Contact/Form/Domain.tpl
@@ -44,20 +44,6 @@
         </td>
     </tr>
     </table>
-  <h3>{ts}System-generated Mail Settings{/ts}</h3>
-    <table class="form-layout-compressed">
-    <tr>
-      <td>
-        {$form.email_name.label} {help id="from-name"}<br />
-        {$form.email_name.html}
-      </td>
-      <td class="">
-        {$form.email_address.label} {help id="from-email"}<br />
-        {$form.email_address.html}
-           <br /><span class="description">(info@example.org)</span>
-      </td>
-    </tr>
-    </table>
 
     <h3>{ts}Default Organization Address{/ts}</h3>
         <div class="description">{ts 1=&#123;domain.address&#125;}CiviMail mailings must include the sending organization's address. This is done by putting the %1 token in either the body or footer of the mailing. This token may also be used in regular 'Email - send now' messages and in other Message Templates. The token is replaced by the address entered below when the message is sent.{/ts}</div>
diff --git a/templates/CRM/Contact/Form/Task/Email.tpl b/templates/CRM/Contact/Form/Task/Email.tpl
index 304ee5ea1ef..e3ca4f8e617 100644
--- a/templates/CRM/Contact/Form/Task/Email.tpl
+++ b/templates/CRM/Contact/Form/Task/Email.tpl
@@ -31,10 +31,10 @@
     </div>
 {/if}
 <table class="form-layout-compressed">
-    <tr class="crm-contactEmail-form-block-fromEmailAddress">
-       <td class="label">{$form.fromEmailAddress.label}</td>
-       <td>{$form.fromEmailAddress.html} {help id="id-from_email" file="CRM/Contact/Form/Task/Email.hlp" isAdmin=$isAdmin}</td>
-    </tr>
+  <tr id="selectEmailFrom" class="crm-contactEmail-form-block-fromEmailAddress crm-email-element">
+    <td class="label">{$form.from_email_address.label}</td>
+    <td>{$form.from_email_address.html} {help id="id-from_email" file="CRM/Contact/Form/Task/Email.hlp" isAdmin=$isAdmin}</td>
+  </tr>
     <tr class="crm-contactEmail-form-block-recipient">
        <td class="label">{if $single eq false}{ts}Recipient(s){/ts}{else}{$form.to.label}{/if}</td>
        <td>
diff --git a/templates/CRM/Contact/Form/Task/PDFLetterCommon.tpl b/templates/CRM/Contact/Form/Task/PDFLetterCommon.tpl
index 5391f478c55..6c224af5969 100644
--- a/templates/CRM/Contact/Form/Task/PDFLetterCommon.tpl
+++ b/templates/CRM/Contact/Form/Task/PDFLetterCommon.tpl
@@ -35,6 +35,10 @@
         {$form.template.html} {ts}OR{/ts} {$form.document_file.html}
       </td>
     </tr>
+    <tr id="fromEmail" class="crm-contactEmail-form-block-fromEmailAddress crm-email-element">
+      <td class="label">{$form.from_email_address.label}</td>
+      <td>{$form.from_email_address.html} {help id="id-from_email" file="CRM/Contact/Form/Task/Email.hlp" isAdmin=$isAdmin}</td>
+    </tr>
     <tr>
       <td class="label-left">{$form.subject.label}</td>
       <td>{$form.subject.html}</td>
diff --git a/templates/CRM/Contribute/Form/Task/Invoice.hlp b/templates/CRM/Contribute/Form/Task/Invoice.hlp
index 6d34a053d27..4845835cab5 100644
--- a/templates/CRM/Contribute/Form/Task/Invoice.hlp
+++ b/templates/CRM/Contribute/Form/Task/Invoice.hlp
@@ -26,16 +26,6 @@
 {htxt id ="id-from_email-title"}
   {ts}From Address{/ts}
 {/htxt}
-{htxt id ="id-from_email"}
-<p>{ts}Select the "FROM" Email Address for this mailing from the dropdown list. Available email addresses are configurable by users with Administer CiviCRM permission. EXAMPLE: "Client Services" &lt;clientservices@example.org&gt;{/ts}</p>
-{if $params.isAdmin}
-    {capture assign="fromConfig"}{crmURL p="civicrm/admin/options/from_email_address" q="reset=1"}{/capture}
-    <p>{ts 1=$fromConfig}Go to <a href='%1'>Administer CiviCRM &raquo; Communications &raquo; FROM Email Addresses</a> to add or edit email addresses. Make sure these email addresses are valid email accounts with your email service provider.{/ts}</p>
-{else}
-    {ts}Contact your site administrator if you need to use a "FROM" Email Address which is not in the dropdown list.{/ts}
-{/if}
-{/htxt}
-
 {htxt id="content-intro-title"}
   {ts}Message Formats{/ts}
 {/htxt}
diff --git a/templates/CRM/Contribute/Form/Task/Invoice.tpl b/templates/CRM/Contribute/Form/Task/Invoice.tpl
index 6c6fa9053a7..fd2a6cb9184 100644
--- a/templates/CRM/Contribute/Form/Task/Invoice.tpl
+++ b/templates/CRM/Contribute/Form/Task/Invoice.tpl
@@ -36,22 +36,27 @@
 <table class="form-layout-compressed">
   {if $selectedOutput ne 'email'}
     <tr>
+      <td class="label">{$form.output.email_invoice.label}</td>
       <td>{$form.output.email_invoice.html}</td>
     </tr>
   {/if}
-  <tr class="crm-email-element">
-    <td>{$form.from_email_address.label}{$form.from_email_address.html}{help id ="id-from_email" isAdmin=$isAdmin}</td>
+  <tr id="selectEmailFrom" style="display: none" class="crm-contactEmail-form-block-fromEmailAddress crm-email-element">
+    <td class="label">{$form.from_email_address.label}</td>
+    <td>{$form.from_email_address.html} {help id="id-from_email" file="CRM/Contact/Form/Task/Email.hlp" isAdmin=$isAdmin}</td>
   </tr>
   <tr class="crm-email-element">
-    <td>{$form.email_comment.label}{$form.email_comment.html}</td>
+    <td class="label">{$form.email_comment.label}</td>
+    <td>{$form.email_comment.html}</td>
   </tr>
   {if $selectedOutput ne 'email'}
     <tr>
+      <td class="label">{$form.output.pdf_invoice.label}</td>
       <td>{$form.output.pdf_invoice.html}</td>
     </tr>
   {/if}
   <tr class="crm-pdf-element">
-    <td>{$form.pdf_format_id.html} {$form.pdf_format_id.label} </td>
+    <td class="label">{$form.pdf_format_id.label}</td>
+    <td>{$form.pdf_format_id.html}</td>
   </tr>
 </table>
 
diff --git a/templates/CRM/Contribute/Form/Task/PDF.tpl b/templates/CRM/Contribute/Form/Task/PDF.tpl
index 67d9934ef9a..a198d00a588 100644
--- a/templates/CRM/Contribute/Form/Task/PDF.tpl
+++ b/templates/CRM/Contribute/Form/Task/PDF.tpl
@@ -35,8 +35,9 @@
   <tr>
     <td>{$form.output.email_receipt.html}</td>
   </tr>
-  <tr id="selectEmailFrom" style="display: none">
-    <td>{$form.fromEmailAddress.label}: {$form.fromEmailAddress.html}</td>
+  <tr id="selectEmailFrom" style="display: none" class="crm-contactEmail-form-block-fromEmailAddress crm-email-element">
+    <td class="label">{$form.from_email_address.label}</td>
+    <td>{$form.from_email_address.html} {help id="id-from_email" file="CRM/Contact/Form/Task/Email.hlp" isAdmin=$isAdmin}</td>
   </tr>
   <tr>
     <td>{$form.output.pdf_receipt.html}</td>
diff --git a/templates/CRM/Contribute/Form/Task/PDFLetter.tpl b/templates/CRM/Contribute/Form/Task/PDFLetter.tpl
index 6e9a49087f6..c8cfb68c113 100644
--- a/templates/CRM/Contribute/Form/Task/PDFLetter.tpl
+++ b/templates/CRM/Contribute/Form/Task/PDFLetter.tpl
@@ -49,6 +49,10 @@
         <td class="label-left">{$form.email_options.label} {help id="id-contribution-email-print"}</td>
         <td>{$form.email_options.html}</td>
       </tr>
+      <tr>
+        <td class="label-left">{$form.from_email_address.label} {help id="id-from_email"}</td>
+        <td>{$form.from_email_address.html}</td>
+      </tr>
     </table>
   </div><!-- /.crm-accordion-body -->
 </div><!-- /.crm-accordion-wrapper -->
diff --git a/templates/CRM/Member/Form/Membership.hlp b/templates/CRM/Member/Form/Membership.hlp
index 5d622035786..e3d5297a2de 100644
--- a/templates/CRM/Member/Form/Membership.hlp
+++ b/templates/CRM/Member/Form/Membership.hlp
@@ -36,3 +36,12 @@
     </ul>
   {/if}
 {/htxt}
+{htxt id ="id-from_email"}
+  <p>{ts}Select the "FROM" Email Address for this mailing from the dropdown list. Available email addresses are configurable by users with Administer CiviCRM permission. EXAMPLE: "Client Services" &lt;clientservices@example.org&gt;{/ts}</p>
+{if $params.isAdmin}
+  {capture assign="fromConfig"}{crmURL p="civicrm/admin/options/from_email_address" q="reset=1"}{/capture}
+  <p>{ts 1=$fromConfig}Go to <a href='%1'>Administer CiviCRM &raquo; Communications &raquo; FROM Email Addresses</a> to add or edit email addresses. Make sure these email addresses are valid email accounts with your email service provider.{/ts}</p>
+{else}
+  {ts}Contact your site administrator if you need to use a "FROM" Email Address which is not in the dropdown list.{/ts}
+{/if}
+{/htxt}
diff --git a/templates/CRM/Member/Form/Membership.tpl b/templates/CRM/Member/Form/Membership.tpl
index 61b5cdb950c..460d3b712d8 100644
--- a/templates/CRM/Member/Form/Membership.tpl
+++ b/templates/CRM/Member/Form/Membership.tpl
@@ -190,9 +190,9 @@
             <span class="auto-renew-text">{ts}For auto-renewing memberships the emails are sent when each payment is received{/ts}</span>
           </tr>
         {/if}
-        <tr id="fromEmail" style="display:none;">
+        <tr id="fromEmail" style="display: none" class="crm-contactEmail-form-block-fromEmailAddress crm-email-element">
           <td class="label">{$form.from_email_address.label}</td>
-          <td>{$form.from_email_address.html}</td>
+          <td>{$form.from_email_address.html} {help id="id-from_email" file="CRM/Contact/Form/Task/Email.hlp" isAdmin=$isAdmin}</td>
         </tr>
         <tr id='notice' style="display:none;">
           <td class="label">{$form.receipt_text.label}</td>
diff --git a/templates/CRM/Member/Form/MembershipRenewal.tpl b/templates/CRM/Member/Form/MembershipRenewal.tpl
index d4e181d4327..758c590bef9 100644
--- a/templates/CRM/Member/Form/MembershipRenewal.tpl
+++ b/templates/CRM/Member/Form/MembershipRenewal.tpl
@@ -129,7 +129,7 @@
         </tr>
         <tr id="fromEmail">
           <td class="label">{$form.from_email_address.label}</td>
-          <td>{$form.from_email_address.html}</td>
+          <td>{$form.from_email_address.html} {help id="id-from_email" isAdmin=$isAdmin}</td>
         </tr>
         <tr id="notice" class="crm-member-membershiprenew-form-block-receipt_text_renewal">
           <td class="label">{$form.receipt_text_renewal.label}</td>
diff --git a/tests/phpunit/CRM/Contact/Form/Task/EmailCommonTest.php b/tests/phpunit/CRM/Contact/Form/Task/EmailCommonTest.php
index ad5a510d22e..ce684d09fee 100644
--- a/tests/phpunit/CRM/Contact/Form/Task/EmailCommonTest.php
+++ b/tests/phpunit/CRM/Contact/Form/Task/EmailCommonTest.php
@@ -46,7 +46,7 @@ protected function setUp() {
    * Test generating domain emails
    */
   public function testDomainEmailGeneration() {
-    $emails = CRM_Contact_Form_Task_EmailCommon::domainEmails();
+    $emails = CRM_Core_BAO_Email::domainEmails();
     $this->assertNotEmpty($emails);
     $optionValue = $this->callAPISuccess('OptionValue', 'Get', array(
       'id' => $this->_optionValue['id'],
diff --git a/tests/phpunit/CRM/Contribute/Form/Task/PDFLetterCommonTest.php b/tests/phpunit/CRM/Contribute/Form/Task/PDFLetterCommonTest.php
index 93faf4db3b2..ba946538a58 100644
--- a/tests/phpunit/CRM/Contribute/Form/Task/PDFLetterCommonTest.php
+++ b/tests/phpunit/CRM/Contribute/Form/Task/PDFLetterCommonTest.php
@@ -206,6 +206,7 @@ public function testPostProcessGroupByContact() {
       'html_message' => $htmlMessage,
       'email_options' => 'both',
       'subject' => 'Testy test test',
+      'from' => 'info@example.com',
     );
 
     $contributionIDs = array();
